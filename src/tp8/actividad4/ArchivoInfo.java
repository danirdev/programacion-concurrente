package tp8.actividad4;

import java.io.File;

/**
 * üìÑ ArchivoInfo - Informaci√≥n de un archivo
 * 
 * Esta clase encapsula la informaci√≥n relevante de un archivo detectado
 * en el directorio monitoreado.
 * 
 * @author Estudiante Programaci√≥n Concurrente 2025
 * @version 1.0
 */
public class ArchivoInfo {
    
    // üè∑Ô∏è Informaci√≥n del archivo
    private final String nombre;
    private final long tama√±o;
    private final long fechaModificacion;
    
    /**
     * üèóÔ∏è Constructor de ArchivoInfo
     * 
     * @param archivo File del cual extraer informaci√≥n
     */
    public ArchivoInfo(File archivo) {
        this.nombre = archivo.getName();
        this.tama√±o = archivo.length();
        this.fechaModificacion = archivo.lastModified();
    }
    
    /**
     * üìè Formatear tama√±o de archivo de forma legible
     * 
     * @return Tama√±o formateado (bytes, KB, MB, GB)
     */
    public String getTama√±oFormateado() {
        if (tama√±o < 1024) {
            return tama√±o + " bytes";
        } else if (tama√±o < 1024 * 1024) {
            return String.format("%.2f KB", tama√±o / 1024.0);
        } else if (tama√±o < 1024 * 1024 * 1024) {
            return String.format("%.2f MB", tama√±o / (1024.0 * 1024));
        } else {
            return String.format("%.2f GB", tama√±o / (1024.0 * 1024 * 1024));
        }
    }
    
    /**
     * üìù Obtener mensaje de notificaci√≥n
     * 
     * @return String con formato de notificaci√≥n
     */
    public String getMensajeNotificacion() {
        return String.format("üÜï Nuevo archivo [%s], con tama√±o [%s]", nombre, getTama√±oFormateado());
    }
    
    // üîß Getters
    
    public String getNombre() { return nombre; }
    
    public long getTama√±o() { return tama√±o; }
    
    public long getFechaModificacion() { return fechaModificacion; }
    
    /**
     * üìù Representaci√≥n en string del archivo
     * 
     * @return Informaci√≥n del archivo
     */
    @Override
    public String toString() {
        return String.format("ArchivoInfo{nombre='%s', tama√±o=%s}", nombre, getTama√±oFormateado());
    }
    
    /**
     * ‚öñÔ∏è Equals basado en nombre de archivo
     * 
     * @param obj Objeto a comparar
     * @return true si los nombres son iguales
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        ArchivoInfo that = (ArchivoInfo) obj;
        return nombre.equals(that.nombre);
    }
    
    /**
     * #Ô∏è‚É£ HashCode basado en nombre de archivo
     * 
     * @return Hash del nombre
     */
    @Override
    public int hashCode() {
        return nombre.hashCode();
    }
}
