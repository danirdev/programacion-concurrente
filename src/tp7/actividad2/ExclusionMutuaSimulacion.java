package tp7.actividad2;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * üîí ExclusionMutuaSimulacion - Simulaci√≥n Principal de Exclusi√≥n Mutua
 * 
 * Esta clase implementa la simulaci√≥n completa de exclusi√≥n mutua comparando
 * los algoritmos cl√°sicos (1 Flag, 2 Flags, Peterson) con la soluci√≥n moderna
 * de sem√°foros. Demuestra las ventajas de los sem√°foros sobre los m√©todos tradicionales.
 * 
 * @author Estudiante Programaci√≥n Concurrente 2025
 * @version 1.0
 */
public class ExclusionMutuaSimulacion {
    
    // ‚öôÔ∏è Configuraci√≥n de la simulaci√≥n
    private static final int NUMERO_PROCESOS = 2;
    private static final int ACCESOS_POR_PROCESO = 15;
    private static final int TIEMPO_MIN_TRABAJO = 50;
    private static final int TIEMPO_MAX_TRABAJO = 150;
    private static final String SEPARADOR = "=".repeat(80);
    
    /**
     * üöÄ M√©todo principal - Punto de entrada de la simulaci√≥n
     * 
     * @param args Argumentos de l√≠nea de comandos
     */
    public static void main(String[] args) {
        System.out.println(SEPARADOR);
        System.out.println("üîí SIMULACI√ìN: EXCLUSI√ìN MUTUA CON SEM√ÅFOROS VS ALGORITMOS CL√ÅSICOS");
        System.out.println(SEPARADOR);
        
        ExclusionMutuaSimulacion simulacion = new ExclusionMutuaSimulacion();
        
        // üìã Mostrar informaci√≥n de inicio
        simulacion.mostrarInformacionInicio();
        
        // üéØ Mostrar men√∫ de opciones
        simulacion.mostrarMenu();
        
        System.out.println(SEPARADOR);
        System.out.println("‚úÖ SIMULACI√ìN COMPLETADA");
        System.out.println(SEPARADOR);
    }
    
    /**
     * üìã Mostrar informaci√≥n de inicio
     */
    private void mostrarInformacionInicio() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        String fechaHora = LocalDateTime.now().format(formatter);
        
        System.out.println("üìÖ Fecha y Hora: " + fechaHora);
        System.out.println("üîÑ Procesos: " + NUMERO_PROCESOS);
        System.out.println("üéØ Accesos por proceso: " + ACCESOS_POR_PROCESO);
        System.out.println("‚è±Ô∏è Tiempo de trabajo: " + TIEMPO_MIN_TRABAJO + "-" + TIEMPO_MAX_TRABAJO + "ms");
        System.out.println("üéØ Objetivo: Demostrar superioridad de sem√°foros sobre algoritmos cl√°sicos");
        System.out.println();
    }
    
    /**
     * üéØ Mostrar men√∫ de opciones
     */
    private void mostrarMenu() {
        Scanner scanner = new Scanner(System.in);
        boolean continuar = true;
        
        while (continuar) {
            System.out.println("\nüéØ === MEN√ö DE SIMULACIONES ===");
            System.out.println("1. üö¶ Demostraci√≥n con Sem√°foros (Recomendado)");
            System.out.println("2. üö© Algoritmo 1 Flag (Defectuoso)");
            System.out.println("3. üö©üö© Algoritmo 2 Flags (Problem√°tico)");
            System.out.println("4. üéØ Algoritmo Peterson (Cl√°sico)");
            System.out.println("5. üìä Comparaci√≥n Completa de Todos");
            System.out.println("6. üîç An√°lisis Te√≥rico");
            System.out.println("0. ‚ùå Salir");
            System.out.print("\nüî¢ Seleccione una opci√≥n: ");
            
            try {
                int opcion = scanner.nextInt();
                System.out.println();
                
                switch (opcion) {
                    case 1 -> ejecutarSimulacionSemaforos();
                    case 2 -> ejecutarSimulacionUnFlag();
                    case 3 -> ejecutarSimulacionDosFlags();
                    case 4 -> ejecutarSimulacionPeterson();
                    case 5 -> ejecutarComparacionCompleta();
                    case 6 -> mostrarAnalisisTeorico();
                    case 0 -> {
                        continuar = false;
                        System.out.println("üëã ¬°Gracias por usar la simulaci√≥n!");
                    }
                    default -> System.out.println("‚ùå Opci√≥n inv√°lida. Intente nuevamente.");
                }
                
                if (continuar && opcion != 0) {
                    System.out.print("\n‚è∏Ô∏è Presione Enter para continuar...");
                    scanner.nextLine();
                    scanner.nextLine();
                }
                
            } catch (Exception e) {
                System.out.println("‚ùå Error en la entrada. Intente nuevamente.");
                scanner.nextLine(); // Limpiar buffer
            }
        }
        
        scanner.close();
    }
    
    /**
     * üö¶ Ejecutar simulaci√≥n con sem√°foros
     */
    private void ejecutarSimulacionSemaforos() {
        System.out.println("üö¶ === SIMULACI√ìN CON SEM√ÅFOROS ===");
        System.out.println("üéØ Demostrando la soluci√≥n MODERNA y EFICIENTE\n");
        
        RecursoCompartido recurso = new RecursoCompartido();
        List<ProcesoExclusionMutua> procesos = new ArrayList<>();
        
        long tiempoInicio = System.currentTimeMillis();
        
        try {
            // Crear procesos
            for (int i = 1; i <= NUMERO_PROCESOS; i++) {
                ProcesoExclusionMutua proceso = new ProcesoExclusionMutua(
                    "P" + i, recurso, ACCESOS_POR_PROCESO, 
                    TIEMPO_MIN_TRABAJO, TIEMPO_MAX_TRABAJO
                );
                procesos.add(proceso);
            }
            
            // Iniciar procesos
            System.out.println("üöÄ Iniciando procesos concurrentes...");
            for (ProcesoExclusionMutua proceso : procesos) {
                proceso.start();
            }
            
            // Esperar finalizaci√≥n
            for (ProcesoExclusionMutua proceso : procesos) {
                proceso.join();
            }
            
            long tiempoTotal = System.currentTimeMillis() - tiempoInicio;
            
            // Mostrar resultados
            System.out.println("\n" + "=".repeat(50));
            System.out.println("üìä RESULTADOS DE SEM√ÅFOROS");
            System.out.println("=".repeat(50));
            System.out.println(recurso.getEstadisticas());
            System.out.printf("‚è±Ô∏è Tiempo total de simulaci√≥n: %dms%n", tiempoTotal);
            
            // Verificar integridad
            boolean integro = recurso.verificarIntegridad();
            System.out.printf("üîç Verificaci√≥n de integridad: %s%n", 
                            integro ? "‚úÖ EXITOSA" : "‚ùå FALLIDA");
            
            System.out.println("\nüèÜ CONCLUSI√ìN: Los sem√°foros garantizan:");
            System.out.println("   ‚úÖ Exclusi√≥n mutua perfecta");
            System.out.println("   ‚úÖ Sin busy wait (eficiencia de CPU)");
            System.out.println("   ‚úÖ Sin deadlocks");
            System.out.println("   ‚úÖ Fairness autom√°tico");
            
        } catch (InterruptedException e) {
            System.err.println("‚ùå Simulaci√≥n interrumpida: " + e.getMessage());
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * üö© Ejecutar simulaci√≥n con algoritmo 1 Flag (defectuoso)
     */
    private void ejecutarSimulacionUnFlag() {
        System.out.println("üö© === SIMULACI√ìN ALGORITMO 1 FLAG ===");
        System.out.println("‚ö†Ô∏è ADVERTENCIA: Este algoritmo es DEFECTUOSO\n");
        
        AlgoritmoClasico.UnFlag algoritmo = new AlgoritmoClasico.UnFlag();
        List<AlgoritmoClasico.ProcesoPrueba> procesos = new ArrayList<>();
        
        long tiempoInicio = System.currentTimeMillis();
        
        try {
            // Crear procesos
            for (int i = 1; i <= NUMERO_PROCESOS; i++) {
                AlgoritmoClasico.ProcesoPrueba proceso = new AlgoritmoClasico.ProcesoPrueba(
                    "1Flag", "P" + i, i, ACCESOS_POR_PROCESO, algoritmo
                );
                procesos.add(proceso);
            }
            
            // Iniciar procesos
            for (AlgoritmoClasico.ProcesoPrueba proceso : procesos) {
                proceso.start();
            }
            
            // Esperar finalizaci√≥n con timeout
            for (AlgoritmoClasico.ProcesoPrueba proceso : procesos) {
                proceso.join(5000);
            }
            
            long tiempoTotal = System.currentTimeMillis() - tiempoInicio;
            
            // Mostrar resultados
            System.out.println("\n" + "=".repeat(50));
            System.out.println("üìä RESULTADOS DE 1 FLAG");
            System.out.println("=".repeat(50));
            System.out.printf("‚ùå Violaciones de exclusi√≥n mutua: %d%n", algoritmo.getViolaciones());
            System.out.printf("‚è±Ô∏è Tiempo total: %dms%n", tiempoTotal);
            
            System.out.println("\n‚ùå PROBLEMAS DETECTADOS:");
            System.out.println("   ‚ùå NO garantiza exclusi√≥n mutua");
            System.out.println("   ‚ùå Race conditions frecuentes");
            System.out.println("   ‚ùå Verificaci√≥n y asignaci√≥n no at√≥micas");
            
        } catch (InterruptedException e) {
            System.err.println("‚ùå Simulaci√≥n interrumpida: " + e.getMessage());
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * üö©üö© Ejecutar simulaci√≥n con algoritmo 2 Flags
     */
    private void ejecutarSimulacionDosFlags() {
        System.out.println("üö©üö© === SIMULACI√ìN ALGORITMO 2 FLAGS ===");
        System.out.println("‚ö†Ô∏è ADVERTENCIA: Riesgo de deadlock\n");
        
        AlgoritmoClasico.DosFlags algoritmo = new AlgoritmoClasico.DosFlags();
        List<AlgoritmoClasico.ProcesoPrueba> procesos = new ArrayList<>();
        
        long tiempoInicio = System.currentTimeMillis();
        
        try {
            // Crear procesos
            for (int i = 1; i <= NUMERO_PROCESOS; i++) {
                AlgoritmoClasico.ProcesoPrueba proceso = new AlgoritmoClasico.ProcesoPrueba(
                    "2Flags", "P" + i, i, ACCESOS_POR_PROCESO, algoritmo
                );
                procesos.add(proceso);
            }
            
            // Iniciar procesos
            for (AlgoritmoClasico.ProcesoPrueba proceso : procesos) {
                proceso.start();
            }
            
            // Esperar finalizaci√≥n con timeout mayor
            for (AlgoritmoClasico.ProcesoPrueba proceso : procesos) {
                proceso.join(10000);
            }
            
            long tiempoTotal = System.currentTimeMillis() - tiempoInicio;
            
            // Mostrar resultados
            System.out.println("\n" + "=".repeat(50));
            System.out.println("üìä RESULTADOS DE 2 FLAGS");
            System.out.println("=".repeat(50));
            System.out.printf("‚ùå Violaciones: %d%n", algoritmo.getViolaciones());
            System.out.printf("‚ö†Ô∏è Deadlocks detectados: %d%n", algoritmo.getDeadlocks());
            System.out.printf("‚è±Ô∏è Tiempo total: %dms%n", tiempoTotal);
            
            System.out.println("\n‚ö†Ô∏è PROBLEMAS DETECTADOS:");
            if (algoritmo.getDeadlocks() > 0) {
                System.out.println("   ‚ùå Deadlocks ocurrieron");
            }
            System.out.println("   ‚ùå Busy wait ineficiente");
            System.out.println("   ‚ùå Posible starvation");
            
        } catch (InterruptedException e) {
            System.err.println("‚ùå Simulaci√≥n interrumpida: " + e.getMessage());
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * üéØ Ejecutar simulaci√≥n con algoritmo Peterson
     */
    private void ejecutarSimulacionPeterson() {
        System.out.println("üéØ === SIMULACI√ìN ALGORITMO PETERSON ===");
        System.out.println("‚úÖ Algoritmo correcto pero con busy wait\n");
        
        AlgoritmoClasico.Peterson algoritmo = new AlgoritmoClasico.Peterson();
        List<AlgoritmoClasico.ProcesoPrueba> procesos = new ArrayList<>();
        
        long tiempoInicio = System.currentTimeMillis();
        
        try {
            // Crear procesos
            for (int i = 1; i <= NUMERO_PROCESOS; i++) {
                AlgoritmoClasico.ProcesoPrueba proceso = new AlgoritmoClasico.ProcesoPrueba(
                    "Peterson", "P" + i, i, ACCESOS_POR_PROCESO, algoritmo
                );
                procesos.add(proceso);
            }
            
            // Iniciar procesos
            for (AlgoritmoClasico.ProcesoPrueba proceso : procesos) {
                proceso.start();
            }
            
            // Esperar finalizaci√≥n
            for (AlgoritmoClasico.ProcesoPrueba proceso : procesos) {
                proceso.join(8000);
            }
            
            long tiempoTotal = System.currentTimeMillis() - tiempoInicio;
            
            // Mostrar resultados
            System.out.println("\n" + "=".repeat(50));
            System.out.println("üìä RESULTADOS DE PETERSON");
            System.out.println("=".repeat(50));
            System.out.printf("‚úÖ Violaciones: %d%n", algoritmo.getViolaciones());
            System.out.printf("üîÑ Ciclos de busy wait: %d%n", algoritmo.getBusyWaitCiclos());
            System.out.printf("‚è±Ô∏è Tiempo total: %dms%n", tiempoTotal);
            
            System.out.println("\n‚úÖ VENTAJAS:");
            System.out.println("   ‚úÖ Exclusi√≥n mutua garantizada");
            System.out.println("   ‚úÖ Sin deadlock");
            System.out.println("\n‚ùå DESVENTAJAS:");
            System.out.println("   ‚ùå Busy wait (desperdicio de CPU)");
            System.out.println("   ‚ùå Complejo de implementar y mantener");
            
        } catch (InterruptedException e) {
            System.err.println("‚ùå Simulaci√≥n interrumpida: " + e.getMessage());
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * üìä Ejecutar comparaci√≥n completa
     */
    private void ejecutarComparacionCompleta() {
        System.out.println("üìä === COMPARACI√ìN COMPLETA DE ALGORITMOS ===");
        System.out.println("üéØ Ejecutando todos los algoritmos para comparaci√≥n...\n");
        
        ComparadorAlgoritmos comparador = new ComparadorAlgoritmos();
        ComparadorAlgoritmos.ResultadoComparacion resultado = comparador.ejecutarComparacionCompleta();
        
        // Mostrar tabla comparativa
        System.out.println("\nüìä TABLA COMPARATIVA FINAL:");
        System.out.printf("%-15s %-10s %-12s %-10s %-12s%n", 
                         "ALGORITMO", "TIEMPO(ms)", "VIOLACIONES", "DEADLOCKS", "EFICIENCIA");
        System.out.println("-".repeat(60));
        
        imprimirComparacion("1 Flag", resultado.unFlag);
        imprimirComparacion("2 Flags", resultado.dosFlags);
        imprimirComparacion("Peterson", resultado.peterson);
        imprimirComparacion("Sem√°foros", resultado.semaforos);
        
        System.out.println("-".repeat(60));
        System.out.println("\nüèÜ GANADOR CLARO: SEM√ÅFOROS");
        System.out.println("   üéØ Mejor en TODAS las m√©tricas importantes");
    }
    
    /**
     * üìù Imprimir l√≠nea de comparaci√≥n
     */
    private void imprimirComparacion(String nombre, ComparadorAlgoritmos.MetricasAlgoritmo metricas) {
        String icono = metricas.violaciones == 0 && metricas.deadlocks == 0 ? "‚úÖ" : "‚ùå";
        System.out.printf("%s %-12s %-10d %-12d %-10d %-12.1f%%%n",
                         icono, nombre, metricas.tiempoEjecucion, metricas.violaciones, 
                         metricas.deadlocks, metricas.eficiencia);
    }
    
    /**
     * üîç Mostrar an√°lisis te√≥rico
     */
    private void mostrarAnalisisTeorico() {
        System.out.println("üîç === AN√ÅLISIS TE√ìRICO DE ALGORITMOS ===\n");
        
        System.out.println("üìö EVOLUCI√ìN HIST√ìRICA:");
        System.out.println("1960s: Primeros intentos con flags simples");
        System.out.println("1965:  Dijkstra introduce los sem√°foros");
        System.out.println("1981:  Peterson perfecciona algoritmo cl√°sico");
        System.out.println("Hoy:   Sem√°foros son el est√°ndar industrial\n");
        
        System.out.println("üî¨ AN√ÅLISIS COMPARATIVO:");
        System.out.println();
        
        System.out.println("üö© ALGORITMO 1 FLAG:");
        System.out.println("   ‚ùå Exclusi√≥n mutua: NO garantizada");
        System.out.println("   ‚ùå Deadlock: Posible");
        System.out.println("   ‚ùå Starvation: Posible");
        System.out.println("   ‚≠ê Simplicidad: Alta");
        System.out.println("   üìä Uso pr√°ctico: NINGUNO (defectuoso)\n");
        
        System.out.println("üö©üö© ALGORITMO 2 FLAGS:");
        System.out.println("   ‚úÖ Exclusi√≥n mutua: Garantizada");
        System.out.println("   ‚ùå Deadlock: Frecuente");
        System.out.println("   ‚ùå Busy wait: Ineficiente");
        System.out.println("   ‚≠ê Simplicidad: Media");
        System.out.println("   üìä Uso pr√°ctico: Limitado\n");
        
        System.out.println("üéØ ALGORITMO PETERSON:");
        System.out.println("   ‚úÖ Exclusi√≥n mutua: Garantizada");
        System.out.println("   ‚úÖ Deadlock: Imposible");
        System.out.println("   ‚ùå Busy wait: Presente");
        System.out.println("   ‚≠ê Simplicidad: Baja");
        System.out.println("   üìä Uso pr√°ctico: Acad√©mico\n");
        
        System.out.println("üö¶ SEM√ÅFOROS:");
        System.out.println("   ‚úÖ Exclusi√≥n mutua: Garantizada");
        System.out.println("   ‚úÖ Deadlock: Evitable");
        System.out.println("   ‚úÖ Busy wait: Eliminado");
        System.out.println("   ‚úÖ Fairness: Autom√°tico");
        System.out.println("   ‚≠ê Simplicidad: Alta");
        System.out.println("   üìä Uso pr√°ctico: EST√ÅNDAR INDUSTRIAL\n");
        
        System.out.println("üéì CONCLUSI√ìN ACAD√âMICA:");
        System.out.println("Los sem√°foros representan la evoluci√≥n natural de los");
        System.out.println("algoritmos de exclusi√≥n mutua, resolviendo TODOS los");
        System.out.println("problemas de los m√©todos cl√°sicos de forma elegante.");
    }
}
