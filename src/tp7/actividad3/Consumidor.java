package tp7.actividad3;

import java.util.Random;

/**
 * üë§ Consumidor - Thread que consume elementos del buffer compartido
 * 
 * Esta clase implementa el lado consumidor del problema cl√°sico Productor-Consumidor.
 * Extrae productos del buffer compartido y los procesa utilizando sem√°foros
 * para sincronizaci√≥n segura con los productores.
 * 
 * @author Estudiante Programaci√≥n Concurrente 2025
 * @version 1.0
 */
public class Consumidor extends Thread {
    
    // üè∑Ô∏è Identificaci√≥n del consumidor
    private final String consumidorId;
    
    // üîÑ Referencia al buffer compartido
    private final BufferCompartido buffer;
    
    // ‚öôÔ∏è Configuraci√≥n de consumo
    private final int elementosAConsumir;
    private final int tiempoMinConsumo;
    private final int tiempoMaxConsumo;
    
    // üé≤ Generador de n√∫meros aleatorios
    private final Random random;
    
    // üìä Estad√≠sticas del consumidor
    private int elementosConsumidos;
    private long tiempoTotalConsumo;
    private long tiempoTotalEspera;
    private long tiempoTotalProcesamiento;
    private boolean activo;
    
    /**
     * üèóÔ∏è Constructor del Consumidor
     * 
     * @param consumidorId Identificador √∫nico del consumidor
     * @param buffer Buffer compartido de donde extraer productos
     * @param elementosAConsumir N√∫mero total de elementos a consumir
     * @param tiempoMinConsumo Tiempo m√≠nimo de procesamiento por elemento (ms)
     * @param tiempoMaxConsumo Tiempo m√°ximo de procesamiento por elemento (ms)
     */
    public Consumidor(String consumidorId, BufferCompartido buffer, int elementosAConsumir, 
                     int tiempoMinConsumo, int tiempoMaxConsumo) {
        this.consumidorId = consumidorId;
        this.buffer = buffer;
        this.elementosAConsumir = elementosAConsumir;
        this.tiempoMinConsumo = tiempoMinConsumo;
        this.tiempoMaxConsumo = tiempoMaxConsumo;
        
        this.random = new Random();
        this.elementosConsumidos = 0;
        this.tiempoTotalConsumo = 0;
        this.tiempoTotalEspera = 0;
        this.tiempoTotalProcesamiento = 0;
        this.activo = true;
        
        // üè∑Ô∏è Configurar nombre del thread
        this.setName("Consumidor-" + consumidorId);
        
        System.out.printf("üë§ %s inicializado - Elementos: %d, Tiempo: %d-%dms%n", 
                         consumidorId, elementosAConsumir, tiempoMinConsumo, tiempoMaxConsumo);
    }
    
    /**
     * üèÉ‚Äç‚ôÇÔ∏è M√©todo principal del thread consumidor
     */
    @Override
    public void run() {
        System.out.printf("‚ñ∂Ô∏è %s iniciado - Thread: %s%n", consumidorId, Thread.currentThread().getName());
        
        long tiempoInicioTotal = System.currentTimeMillis();
        
        try {
            for (int i = 1; i <= elementosAConsumir && activo && !Thread.currentThread().isInterrupted(); i++) {
                
                // üì¶ Extraer elemento del buffer
                Producto producto = extraerDelBuffer();
                
                if (producto != null) {
                    // üîß Procesar elemento
                    procesarElemento(producto, i);
                    elementosConsumidos++;
                } else {
                    System.out.printf("[%s] ‚ö†Ô∏è No se pudo extraer elemento #%d%n", consumidorId, i);
                }
                
                // üò¥ Pausa entre consumos (simular tiempo entre procesamiento)
                if (i < elementosAConsumir) {
                    pausarEntreConsumo();
                }
            }
            
        } catch (InterruptedException e) {
            System.out.printf("‚ö†Ô∏è %s interrumpido%n", consumidorId);
            Thread.currentThread().interrupt();
        } finally {
            activo = false;
            tiempoTotalConsumo = System.currentTimeMillis() - tiempoInicioTotal;
            System.out.printf("üõë %s finalizado - Tiempo total: %dms%n", consumidorId, tiempoTotalConsumo);
            mostrarEstadisticasConsumidor();
        }
    }
    
    /**
     * üì¶ Extraer producto del buffer compartido
     * 
     * @return Producto extra√≠do o null si hay error
     * @throws InterruptedException Si el thread es interrumpido
     */
    private Producto extraerDelBuffer() throws InterruptedException {
        long tiempoInicio = System.currentTimeMillis();
        
        System.out.printf("[%s] üì• Intentando extraer elemento del buffer%n", consumidorId);
        
        // üîÑ Usar el buffer compartido (con sem√°foros)
        Producto producto = buffer.tomar(consumidorId);
        
        long tiempoEspera = System.currentTimeMillis() - tiempoInicio;
        tiempoTotalEspera += tiempoEspera;
        
        if (producto != null) {
            System.out.printf("[%s] ‚úÖ Producto #%d extra√≠do exitosamente%n", 
                             consumidorId, producto.getId());
        }
        
        return producto;
    }
    
    /**
     * üîß Procesar elemento extra√≠do del buffer
     * 
     * @param producto Producto a procesar
     * @param numeroElemento N√∫mero secuencial del elemento procesado
     * @throws InterruptedException Si el thread es interrumpido
     */
    private void procesarElemento(Producto producto, int numeroElemento) throws InterruptedException {
        long tiempoInicio = System.currentTimeMillis();
        
        // üé≤ Generar tiempo de procesamiento aleatorio
        int tiempoProcesamiento = tiempoMinConsumo + 
                                 random.nextInt(tiempoMaxConsumo - tiempoMinConsumo + 1);
        
        System.out.printf("[%s] üîß Procesando %s (tiempo estimado: %dms)%n", 
                         consumidorId, producto.getNombre(), tiempoProcesamiento);
        
        // ‚è±Ô∏è Simular tiempo de procesamiento
        Thread.sleep(tiempoProcesamiento);
        
        // üîç Procesar seg√∫n el tipo de producto
        String resultadoProcesamiento = procesarSegunTipo(producto);
        
        long tiempoReal = System.currentTimeMillis() - tiempoInicio;
        tiempoTotalProcesamiento += tiempoReal;
        
        System.out.printf("[%s] ‚úÖ Elemento #%d procesado - %s - Tiempo: %dms%n", 
                         consumidorId, numeroElemento, resultadoProcesamiento, tiempoReal);
        
        // üìä Mostrar informaci√≥n del producto procesado
        if (numeroElemento % 10 == 0) { // Cada 10 elementos
            System.out.printf("[%s] üìä Progreso: %d/%d elementos procesados%n", 
                             consumidorId, numeroElemento, elementosAConsumir);
        }
    }
    
    /**
     * üîç Procesar producto seg√∫n su tipo
     * 
     * @param producto Producto a procesar
     * @return Resultado del procesamiento
     */
    private String procesarSegunTipo(Producto producto) {
        return switch (producto.getTipo()) {
            case "DOCUMENTO" -> "Documento indexado y archivado";
            case "IMAGEN" -> String.format("Imagen procesada (%d bytes)", producto.getTamanio());
            case "VIDEO" -> String.format("Video codificado (%d bytes)", producto.getTamanio());
            case "AUDIO" -> String.format("Audio normalizado (%d bytes)", producto.getTamanio());
            case "DATOS" -> "Datos analizados y validados";
            case "REPORTE" -> "Reporte generado y distribuido";
            case "MENSAJE" -> "Mensaje entregado al destinatario";
            case "ARCHIVO" -> "Archivo comprimido y almacenado";
            default -> "Procesamiento gen√©rico completado";
        };
    }
    
    /**
     * üò¥ Pausar entre consumos
     * 
     * @throws InterruptedException Si el thread es interrumpido
     */
    private void pausarEntreConsumo() throws InterruptedException {
        // Pausa corta entre consumos (5-30ms)
        int pausaCorta = 5 + random.nextInt(25);
        Thread.sleep(pausaCorta);
    }
    
    /**
     * üõë Detener el consumidor de forma segura
     */
    public void detener() {
        activo = false;
        this.interrupt();
        System.out.printf("üî¥ %s marcado para detener%n", consumidorId);
    }
    
    /**
     * üìä Mostrar estad√≠sticas espec√≠ficas del consumidor
     */
    private void mostrarEstadisticasConsumidor() {
        System.out.printf("\n=== üìä ESTAD√çSTICAS %s ===\n", consumidorId);
        System.out.printf("üë§ Elementos consumidos: %d/%d%n", elementosConsumidos, elementosAConsumir);
        System.out.printf("‚è±Ô∏è Tiempo total consumo: %dms%n", tiempoTotalConsumo);
        System.out.printf("‚è≥ Tiempo total espera: %dms%n", tiempoTotalEspera);
        System.out.printf("üîß Tiempo total procesamiento: %dms%n", tiempoTotalProcesamiento);
        
        if (elementosConsumidos > 0) {
            System.out.printf("üìä Tiempo promedio por elemento: %.2fms%n", 
                             (double) tiempoTotalConsumo / elementosConsumidos);
            System.out.printf("‚è±Ô∏è Tiempo promedio espera: %.2fms%n", 
                             (double) tiempoTotalEspera / elementosConsumidos);
            System.out.printf("üîß Tiempo promedio procesamiento: %.2fms%n", 
                             (double) tiempoTotalProcesamiento / elementosConsumidos);
        }
        
        if (tiempoTotalConsumo > 0) {
            double throughput = (elementosConsumidos * 1000.0) / tiempoTotalConsumo;
            System.out.printf("üöÄ Throughput: %.2f elementos/segundo%n", throughput);
            
            double eficiencia = ((double) tiempoTotalProcesamiento / tiempoTotalConsumo) * 100;
            System.out.printf("‚ö° Eficiencia: %.1f%% (tiempo procesamiento vs total)%n", eficiencia);
            
            double utilizacion = ((double) (tiempoTotalConsumo - tiempoTotalEspera) / tiempoTotalConsumo) * 100;
            System.out.printf("üìà Utilizaci√≥n: %.1f%% (tiempo activo vs total)%n", utilizacion);
        }
    }
    
    /**
     * üìä Obtener estad√≠sticas del consumidor
     * 
     * @return Array con [consumidos, tiempoTotal, tiempoEspera, tiempoProcesamiento, throughput, eficiencia]
     */
    public double[] getEstadisticas() {
        double throughput = tiempoTotalConsumo > 0 ? 
            (elementosConsumidos * 1000.0) / tiempoTotalConsumo : 0;
        double eficiencia = tiempoTotalConsumo > 0 ? 
            ((double) tiempoTotalProcesamiento / tiempoTotalConsumo) * 100 : 0;
        
        return new double[]{
            elementosConsumidos,
            tiempoTotalConsumo,
            tiempoTotalEspera,
            tiempoTotalProcesamiento,
            throughput,
            eficiencia
        };
    }
    
    /**
     * üè∑Ô∏è Obtener identificador del consumidor
     * 
     * @return ID del consumidor
     */
    public String getConsumidorId() {
        return consumidorId;
    }
    
    /**
     * ‚úÖ Verificar si el consumidor est√° activo
     * 
     * @return true si est√° activo, false si est√° detenido
     */
    public boolean isActivo() {
        return activo;
    }
    
    /**
     * üéØ Obtener porcentaje de completitud
     * 
     * @return Porcentaje de elementos consumidos (0-100)
     */
    public double getPorcentajeCompletitud() {
        return elementosAConsumir > 0 ? (elementosConsumidos * 100.0) / elementosAConsumir : 0;
    }
    
    /**
     * ‚è±Ô∏è Obtener tiempo promedio de procesamiento
     * 
     * @return Tiempo promedio en milisegundos
     */
    public double getTiempoPromedioProcesamiento() {
        return elementosConsumidos > 0 ? (double) tiempoTotalProcesamiento / elementosConsumidos : 0;
    }
    
    /**
     * üìà Obtener utilizaci√≥n del consumidor
     * 
     * @return Porcentaje de utilizaci√≥n (tiempo activo vs total)
     */
    public double getUtilizacion() {
        return tiempoTotalConsumo > 0 ? 
            ((double) (tiempoTotalConsumo - tiempoTotalEspera) / tiempoTotalConsumo) * 100 : 0;
    }
    
    /**
     * üìù Representaci√≥n en string del consumidor
     * 
     * @return Informaci√≥n b√°sica del consumidor
     */
    @Override
    public String toString() {
        return String.format("Consumidor{id='%s', consumidos=%d/%d, activo=%s, eficiencia=%.1f%%}", 
                           consumidorId, elementosConsumidos, elementosAConsumir, activo, 
                           getEstadisticas()[5]);
    }
}
