package tp7.actividad4;

/**
 * üî¢ MonitorContador - Monitor para contador compartido con exclusi√≥n mutua impl√≠cita
 * 
 * Esta clase implementa un monitor que encapsula un contador compartido
 * garantizando que todas las operaciones (incremento, decremento, lectura)
 * se realicen con exclusi√≥n mutua impl√≠cita.
 * 
 * @author Estudiante Programaci√≥n Concurrente 2025
 * @version 1.0
 */
public class MonitorContador extends Monitor {
    
    // üî¢ Estado interno del contador
    private int valor;
    private final int valorMinimo;
    private final int valorMaximo;
    
    // üîÑ Variables de condici√≥n
    private final VariableCondicion noMinimo;    // Para esperar cuando valor > m√≠nimo
    private final VariableCondicion noMaximo;    // Para esperar cuando valor < m√°ximo
    
    // üìä Estad√≠sticas espec√≠ficas del contador
    private int totalIncrementos;
    private int totalDecrementos;
    private int totalLecturas;
    private int valorMaximoAlcanzado;
    private int valorMinimoAlcanzado;
    
    /**
     * üèóÔ∏è Constructor del MonitorContador
     * 
     * @param valorInicial Valor inicial del contador
     * @param valorMinimo Valor m√≠nimo permitido
     * @param valorMaximo Valor m√°ximo permitido
     */
    public MonitorContador(int valorInicial, int valorMinimo, int valorMaximo) {
        super("ContadorCompartido");
        
        if (valorMinimo > valorMaximo) {
            throw new IllegalArgumentException("Valor m√≠nimo no puede ser mayor al m√°ximo");
        }
        if (valorInicial < valorMinimo || valorInicial > valorMaximo) {
            throw new IllegalArgumentException("Valor inicial fuera del rango permitido");
        }
        
        this.valor = valorInicial;
        this.valorMinimo = valorMinimo;
        this.valorMaximo = valorMaximo;
        
        // üîÑ Crear variables de condici√≥n
        this.noMinimo = new VariableCondicion("NoMinimo");
        this.noMaximo = new VariableCondicion("NoMaximo");
        
        this.totalIncrementos = 0;
        this.totalDecrementos = 0;
        this.totalLecturas = 0;
        this.valorMaximoAlcanzado = valorInicial;
        this.valorMinimoAlcanzado = valorInicial;
        
        inicializarEstado();
        
        System.out.printf("üî¢ MonitorContador creado - Valor: %d, Rango: [%d, %d]%n", 
                         valorInicial, valorMinimo, valorMaximo);
    }
    
    /**
     * üèóÔ∏è Constructor simplificado (sin l√≠mites)
     * 
     * @param valorInicial Valor inicial del contador
     */
    public MonitorContador(int valorInicial) {
        this(valorInicial, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }
    
    /**
     * ‚ûï Incrementar contador
     * Exclusi√≥n mutua impl√≠cita garantizada por el monitor
     * 
     * @param procesoId ID del proceso que incrementa
     * @return Nuevo valor del contador
     */
    public int incrementar(String procesoId) {
        return ejecutarFuncion(procesoId, () -> {
            try {
                // ‚è≥ Esperar mientras el contador est√© en el m√°ximo
                while (valor >= valorMaximo) {
                    System.out.printf("[%s] ‚è≥ Contador en m√°ximo (%d), esperando...%n", procesoId, valorMaximo);
                    noMaximo.esperar(procesoId, getMutexSemaforo());
                }
                
                // ‚ûï Incrementar valor
                valor++;
                totalIncrementos++;
                
                // üìà Actualizar estad√≠sticas
                if (valor > valorMaximoAlcanzado) {
                    valorMaximoAlcanzado = valor;
                }
                
                System.out.printf("[%s] ‚ûï Contador incrementado: %d%n", procesoId, valor);
                
                // üîî Se√±alar que ya no estamos en el m√≠nimo
                if (valor > valorMinimo) {
                    noMinimo.se√±alar(procesoId);
                }
                
                return valor;
                
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                throw new RuntimeException("Incremento interrumpido", e);
            }
        });
    }
    
    /**
     * ‚ûñ Decrementar contador
     * Exclusi√≥n mutua impl√≠cita garantizada por el monitor
     * 
     * @param procesoId ID del proceso que decrementa
     * @return Nuevo valor del contador
     */
    public int decrementar(String procesoId) {
        return ejecutarFuncion(procesoId, () -> {
            try {
                // ‚è≥ Esperar mientras el contador est√© en el m√≠nimo
                while (valor <= valorMinimo) {
                    System.out.printf("[%s] ‚è≥ Contador en m√≠nimo (%d), esperando...%n", procesoId, valorMinimo);
                    noMinimo.esperar(procesoId, getMutexSemaforo());
                }
                
                // ‚ûñ Decrementar valor
                valor--;
                totalDecrementos++;
                
                // üìâ Actualizar estad√≠sticas
                if (valor < valorMinimoAlcanzado) {
                    valorMinimoAlcanzado = valor;
                }
                
                System.out.printf("[%s] ‚ûñ Contador decrementado: %d%n", procesoId, valor);
                
                // üîî Se√±alar que ya no estamos en el m√°ximo
                if (valor < valorMaximo) {
                    noMaximo.se√±alar(procesoId);
                }
                
                return valor;
                
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                throw new RuntimeException("Decremento interrumpido", e);
            }
        });
    }
    
    /**
     * üìñ Obtener valor actual del contador (lectura sincronizada)
     * 
     * @param procesoId ID del proceso que lee
     * @return Valor actual del contador
     */
    public int obtenerValor(String procesoId) {
        return ejecutarFuncion(procesoId, () -> {
            totalLecturas++;
            System.out.printf("[%s] üìñ Leyendo contador: %d%n", procesoId, valor);
            return valor;
        });
    }
    
    /**
     * üîÑ Establecer nuevo valor (con validaci√≥n)
     * 
     * @param nuevoValor Nuevo valor a establecer
     * @param procesoId ID del proceso que establece
     * @return Valor anterior
     */
    public int establecerValor(int nuevoValor, String procesoId) {
        return ejecutarFuncion(procesoId, () -> {
            if (nuevoValor < valorMinimo || nuevoValor > valorMaximo) {
                throw new IllegalArgumentException(
                    String.format("Valor %d fuera del rango [%d, %d]", nuevoValor, valorMinimo, valorMaximo));
            }
            
            int valorAnterior = valor;
            valor = nuevoValor;
            
            // üìä Actualizar estad√≠sticas
            if (valor > valorMaximoAlcanzado) {
                valorMaximoAlcanzado = valor;
            }
            if (valor < valorMinimoAlcanzado) {
                valorMinimoAlcanzado = valor;
            }
            
            System.out.printf("[%s] üîÑ Contador establecido: %d ‚Üí %d%n", procesoId, valorAnterior, valor);
            
            // üîî Se√±alar cambios de estado
            if (valor > valorMinimo) {
                noMinimo.se√±alarTodos(procesoId);
            }
            if (valor < valorMaximo) {
                noMaximo.se√±alarTodos(procesoId);
            }
            
            return valorAnterior;
        });
    }
    
    /**
     * üîç Verificar si el contador est√° en el m√≠nimo
     * 
     * @param procesoId ID del proceso que consulta
     * @return true si est√° en el valor m√≠nimo
     */
    public boolean estaEnMinimo(String procesoId) {
        return ejecutarFuncion(procesoId, () -> valor <= valorMinimo);
    }
    
    /**
     * üîç Verificar si el contador est√° en el m√°ximo
     * 
     * @param procesoId ID del proceso que consulta
     * @return true si est√° en el valor m√°ximo
     */
    public boolean estaEnMaximo(String procesoId) {
        return ejecutarFuncion(procesoId, () -> valor >= valorMaximo);
    }
    
    /**
     * üìä Obtener estad√≠sticas espec√≠ficas del contador
     * 
     * @return String con estad√≠sticas del contador
     */
    public String getEstadisticasContador() {
        StringBuilder stats = new StringBuilder();
        stats.append(String.format("\n=== üî¢ ESTAD√çSTICAS MONITOR CONTADOR ===\n"));
        stats.append(String.format("üî¢ Valor actual: %d%n", valor));
        stats.append(String.format("üìè Rango: [%d, %d]%n", valorMinimo, valorMaximo));
        stats.append(String.format("‚ûï Total incrementos: %d%n", totalIncrementos));
        stats.append(String.format("‚ûñ Total decrementos: %d%n", totalDecrementos));
        stats.append(String.format("üìñ Total lecturas: %d%n", totalLecturas));
        stats.append(String.format("üìà M√°ximo alcanzado: %d%n", valorMaximoAlcanzado));
        stats.append(String.format("üìâ M√≠nimo alcanzado: %d%n", valorMinimoAlcanzado));
        stats.append(String.format("üîÑ Operaciones totales: %d%n", 
                                  totalIncrementos + totalDecrementos + totalLecturas));
        
        // Estad√≠sticas de variables de condici√≥n
        stats.append(noMinimo.getEstadisticas());
        stats.append(noMaximo.getEstadisticas());
        
        return stats.toString();
    }
    
    /**
     * üîç Verificar integridad espec√≠fica del contador
     * 
     * @return true si el contador est√° √≠ntegro
     */
    public boolean verificarIntegridadContador() {
        // Verificar integridad base del monitor
        boolean integridadBase = verificarIntegridad();
        
        // Verificar que el valor est√© en rango
        boolean valorEnRango = valor >= valorMinimo && valor <= valorMaximo;
        
        // Verificar consistencia de estad√≠sticas
        boolean estadisticasValidas = totalIncrementos >= 0 && totalDecrementos >= 0 && totalLecturas >= 0;
        
        // Verificar rangos de valores alcanzados
        boolean rangosValidos = valorMinimoAlcanzado <= valorMaximoAlcanzado;
        
        // Verificar variables de condici√≥n
        boolean variablesIntegras = noMinimo.verificarIntegridad() && noMaximo.verificarIntegridad();
        
        boolean integro = integridadBase && valorEnRango && estadisticasValidas && 
                         rangosValidos && variablesIntegras;
        
        if (!integro) {
            System.err.printf("‚ùå INTEGRIDAD CONTADOR COMPROMETIDA:%n");
            System.err.printf("   Valor en rango: %s (%d ‚àà [%d, %d])%n", 
                             valorEnRango, valor, valorMinimo, valorMaximo);
            System.err.printf("   Estad√≠sticas v√°lidas: %s%n", estadisticasValidas);
            System.err.printf("   Rangos v√°lidos: %s%n", rangosValidos);
            System.err.printf("   Variables √≠ntegras: %s%n", variablesIntegras);
        }
        
        return integro;
    }
    
    // üéØ Implementaci√≥n de m√©todos abstractos
    
    @Override
    protected void inicializarEstado() {
        System.out.printf("üîß Inicializando estado del MonitorContador%n");
        // Estado ya inicializado en constructor
    }
    
    @Override
    public String getDescripcion() {
        return String.format("Monitor Contador (Valor: %d, Rango: [%d, %d])", 
                           valor, valorMinimo, valorMaximo);
    }
    
    @Override
    public boolean ejecutarPrueba(String procesoId) {
        System.out.printf("üß™ Ejecutando prueba del MonitorContador con proceso %s%n", procesoId);
        
        try {
            // Prueba b√°sica: incrementar, leer, decrementar
            int valorInicial = obtenerValor(procesoId);
            int valorIncrementado = incrementar(procesoId);
            int valorLeido = obtenerValor(procesoId);
            int valorDecrementado = decrementar(procesoId);
            int valorFinal = obtenerValor(procesoId);
            
            boolean pruebaExitosa = (valorIncrementado == valorInicial + 1) &&
                                  (valorLeido == valorIncrementado) &&
                                  (valorDecrementado == valorInicial) &&
                                  (valorFinal == valorInicial);
            
            System.out.printf("üß™ Prueba MonitorContador: %s%n", 
                             pruebaExitosa ? "‚úÖ EXITOSA" : "‚ùå FALLIDA");
            
            return pruebaExitosa;
            
        } catch (Exception e) {
            System.err.printf("‚ùå Error en prueba MonitorContador: %s%n", e.getMessage());
            return false;
        }
    }
    
    // üîß Getters espec√≠ficos
    
    public int getValorMinimo() { return valorMinimo; }
    
    public int getValorMaximo() { return valorMaximo; }
    
    public int getTotalIncrementos() { return totalIncrementos; }
    
    public int getTotalDecrementos() { return totalDecrementos; }
    
    public int getTotalLecturas() { return totalLecturas; }
    
    public int getValorMaximoAlcanzado() { return valorMaximoAlcanzado; }
    
    public int getValorMinimoAlcanzado() { return valorMinimoAlcanzado; }
    
    public VariableCondicion getVariableNoMinimo() { return noMinimo; }
    
    public VariableCondicion getVariableNoMaximo() { return noMaximo; }
    
    /**
     * üìù Representaci√≥n en string del monitor contador
     * 
     * @return Informaci√≥n del contador
     */
    @Override
    public String toString() {
        return String.format("MonitorContador{valor=%d, rango=[%d,%d], inc=%d, dec=%d, lec=%d}", 
                           valor, valorMinimo, valorMaximo, totalIncrementos, totalDecrementos, totalLecturas);
    }
}
