package tp6.actividad2.implementacion_a;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

/**
 * Clase principal para la simulaci√≥n del Sem√°foro Interno - Implementaci√≥n A.
 * Crea 10 hilos que utilizan un sem√°foro general inicializado en 3.
 * Cada hilo duerme por 5 segundos y muestra el orden de ejecuci√≥n.
 */
public class SemaforoInternoSimulacion {
    
    public static void main(String[] args) {
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss.SSS");
        String tiempo = LocalTime.now().format(timeFormatter);
        
        System.out.println("=".repeat(80));
        System.out.println("        SEM√ÅFORO GENERAL - IMPLEMENTACI√ìN A (INTERNO)");
        System.out.println("=".repeat(80));
        System.out.println("[" + tiempo + "] Iniciando simulaci√≥n con sem√°foro interno");
        System.out.println();
        System.out.println("CONFIGURACI√ìN DEL SISTEMA:");
        System.out.println("‚Ä¢ Implementaci√≥n: A - Sem√°foro definido dentro de la clase");
        System.out.println("‚Ä¢ Valor inicial del sem√°foro: 3");
        System.out.println("‚Ä¢ N√∫mero de hilos: 10");
        System.out.println("‚Ä¢ Tiempo de sue√±o por hilo: 5 segundos");
        System.out.println("‚Ä¢ Tipo de acceso: M√©todos est√°ticos");
        System.out.println("‚Ä¢ Acoplamiento: Alto (sem√°foro interno)");
        System.out.println("=".repeat(80));
        System.out.println();
        
        // Mostrar configuraci√≥n del sem√°foro
        System.out.println(SemaforoInterno.getConfiguracion());
        System.out.println();
        
        // Registrar tiempo de inicio
        long tiempoInicioTotal = System.currentTimeMillis();
        
        // Crear lista de hilos
        List<HiloSemaforoInterno> hilos = new ArrayList<>();
        
        // Crear 10 hilos
        tiempo = LocalTime.now().format(timeFormatter);
        System.out.println("[" + tiempo + "] üîß Creando 10 hilos...");
        
        for (int i = 1; i <= 10; i++) {
            String nombreHilo = "Hilo-" + String.format("%02d", i);
            HiloSemaforoInterno hilo = new HiloSemaforoInterno(nombreHilo);
            hilos.add(hilo);
            System.out.println("   ‚úÖ " + nombreHilo + " creado");
        }
        
        System.out.println();
        tiempo = LocalTime.now().format(timeFormatter);
        System.out.println("[" + tiempo + "] üöÄ INICIANDO TODOS LOS HILOS");
        System.out.println("Estado inicial: " + SemaforoInterno.getInfoResumida());
        System.out.println("=".repeat(50));
        
        // Iniciar todos los hilos
        for (HiloSemaforoInterno hilo : hilos) {
            hilo.start();
            // Peque√±o delay para observar mejor el orden
            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
        
        // Crear hilo monitor para mostrar estad√≠sticas peri√≥dicas
        Thread monitor = new Thread(() -> {
            try {
                while (!Thread.currentThread().isInterrupted()) {
                    Thread.sleep(3000); // Cada 3 segundos
                    SemaforoInterno.mostrarEstado();
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }, "Monitor-Estadisticas");
        
        monitor.start();
        
        System.out.println("‚è≥ Esperando que todos los hilos completen su ejecuci√≥n...");
        System.out.println("üìä Observar el orden de ejecuci√≥n y el comportamiento del sem√°foro");
        System.out.println();
        
        // Esperar a que todos los hilos terminen
        for (HiloSemaforoInterno hilo : hilos) {
            try {
                hilo.join(); // Esperar a que termine cada hilo
            } catch (InterruptedException e) {
                System.err.println("‚ùå Interrupci√≥n durante la espera del hilo: " + hilo.getName());
                Thread.currentThread().interrupt();
            }
        }
        
        // Detener el monitor
        monitor.interrupt();
        try {
            monitor.join(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        // Calcular tiempo total
        long tiempoFinTotal = System.currentTimeMillis();
        long tiempoTotal = tiempoFinTotal - tiempoInicioTotal;
        
        // Mostrar estad√≠sticas finales
        mostrarEstadisticasFinales(hilos, tiempoTotal);
        
        // Demostrar caracter√≠sticas de la Implementaci√≥n A
        demostrarCaracteristicasImplementacionA();
    }
    
    /**
     * Muestra las estad√≠sticas finales de la simulaci√≥n
     */
    private static void mostrarEstadisticasFinales(List<HiloSemaforoInterno> hilos, long tiempoTotal) {
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss.SSS");
        String tiempo = LocalTime.now().format(timeFormatter);
        
        System.out.println();
        System.out.println("=".repeat(80));
        System.out.println("           ESTAD√çSTICAS FINALES - IMPLEMENTACI√ìN A");
        System.out.println("=".repeat(80));
        System.out.println("[" + tiempo + "] Simulaci√≥n completada");
        System.out.println();
        
        // Estad√≠sticas del sem√°foro
        int[] statsSemaforo = SemaforoInterno.getEstadisticas();
        System.out.println("üîí ESTAD√çSTICAS DEL SEM√ÅFORO INTERNO:");
        System.out.println("   Valor final: " + statsSemaforo[0]);
        System.out.println("   Total adquisiciones: " + statsSemaforo[1]);
        System.out.println("   Total liberaciones: " + statsSemaforo[2]);
        System.out.println("   Hilos esperando al final: " + statsSemaforo[3]);
        System.out.println("   Balance (A-L): " + (statsSemaforo[1] - statsSemaforo[2]));
        System.out.println("   Estado final: " + (statsSemaforo[0] == 3 ? "‚úÖ RESTAURADO" : "‚ö†Ô∏è INCONSISTENTE"));
        System.out.println();
        
        // Estad√≠sticas de hilos
        int completados = 0;
        int esperaron = 0;
        long tiempoEsperaTotal = 0;
        long tiempoEsperaMaximo = 0;
        long tiempoEsperaMinimo = Long.MAX_VALUE;
        
        System.out.println("üßµ ESTAD√çSTICAS DE HILOS:");
        for (HiloSemaforoInterno hilo : hilos) {
            if (hilo.isCompletoEjecucion()) {
                completados++;
            }
            
            long tiempoEspera = hilo.getTiempoEspera();
            if (hilo.tuvoQueEsperar()) {
                esperaron++;
                tiempoEsperaTotal += tiempoEspera;
                tiempoEsperaMaximo = Math.max(tiempoEsperaMaximo, tiempoEspera);
                tiempoEsperaMinimo = Math.min(tiempoEsperaMinimo, tiempoEspera);
            }
        }
        
        System.out.println("   Total hilos: " + hilos.size());
        System.out.println("   Completados exitosamente: " + completados);
        System.out.println("   Hilos que esperaron: " + esperaron);
        System.out.println("   Tasa de finalizaci√≥n: " + 
                          String.format("%.1f%%", (completados * 100.0 / hilos.size())));
        
        if (esperaron > 0) {
            double tiempoPromedioEspera = tiempoEsperaTotal / (double) esperaron;
            System.out.println("   Tiempo promedio de espera: " + String.format("%.0f", tiempoPromedioEspera) + "ms");
            System.out.println("   Tiempo m√°ximo de espera: " + tiempoEsperaMaximo + "ms");
            System.out.println("   Tiempo m√≠nimo de espera: " + (tiempoEsperaMinimo == Long.MAX_VALUE ? 0 : tiempoEsperaMinimo) + "ms");
        }
        System.out.println();
        
        // An√°lisis temporal
        System.out.println("‚è±Ô∏è AN√ÅLISIS TEMPORAL:");
        double tiempoTotalSegundos = tiempoTotal / 1000.0;
        System.out.println("   Tiempo total de simulaci√≥n: " + String.format("%.1f", tiempoTotalSegundos) + "s");
        System.out.println("   Tiempo te√≥rico m√≠nimo: 15.0s (3 grupos √ó 5s)");
        System.out.println("   Tiempo te√≥rico m√°ximo: 50.0s (10 hilos √ó 5s)");
        
        if (tiempoTotalSegundos <= 20) {
            System.out.println("   Eficiencia: ‚úÖ EXCELENTE (paralelizaci√≥n √≥ptima)");
        } else if (tiempoTotalSegundos <= 30) {
            System.out.println("   Eficiencia: ‚úÖ BUENA (paralelizaci√≥n efectiva)");
        } else {
            System.out.println("   Eficiencia: ‚ö†Ô∏è MEJORABLE (poca paralelizaci√≥n)");
        }
        System.out.println();
        
        // Detalles por hilo
        System.out.println("üìã DETALLES POR HILO:");
        for (HiloSemaforoInterno hilo : hilos) {
            System.out.println("   " + hilo.getEstadisticasDetalladas());
        }
        System.out.println();
        
        // An√°lisis del comportamiento del sem√°foro
        System.out.println("üîç AN√ÅLISIS DEL COMPORTAMIENTO:");
        System.out.println("   M√°ximo hilos simult√°neos: 3 (limitado por sem√°foro)");
        System.out.println("   Hilos que accedieron inmediatamente: " + (hilos.size() - esperaron));
        System.out.println("   Hilos que tuvieron que esperar: " + esperaron);
        
        if (esperaron == 7) { // 10 - 3 = 7 hilos deber√≠an esperar
            System.out.println("   Comportamiento: ‚úÖ CORRECTO (7 hilos esperaron como se esperaba)");
        } else {
            System.out.println("   Comportamiento: ‚ö†Ô∏è INESPERADO (" + esperaron + " hilos esperaron)");
        }
    }
    
    /**
     * Demuestra las caracter√≠sticas espec√≠ficas de la Implementaci√≥n A
     */
    private static void demostrarCaracteristicasImplementacionA() {
        System.out.println();
        System.out.println("=".repeat(80));
        System.out.println("         CARACTER√çSTICAS DE LA IMPLEMENTACI√ìN A");
        System.out.println("=".repeat(80));
        
        System.out.println("\nüèóÔ∏è ARQUITECTURA:");
        System.out.println("   ‚úÖ Sem√°foro definido dentro de la clase SemaforoInterno");
        System.out.println("   ‚úÖ Acceso mediante m√©todos est√°ticos");
        System.out.println("   ‚úÖ Singleton impl√≠cito (una sola instancia global)");
        System.out.println("   ‚úÖ Inicializaci√≥n autom√°tica en valor 3");
        
        System.out.println("\nüëç VENTAJAS:");
        System.out.println("   ‚úÖ Simplicidad de uso - No requiere pasar par√°metros");
        System.out.println("   ‚úÖ Acceso global autom√°tico desde cualquier hilo");
        System.out.println("   ‚úÖ No hay riesgo de perder la referencia al sem√°foro");
        System.out.println("   ‚úÖ Menos c√≥digo de configuraci√≥n en el main");
        
        System.out.println("\nüëé DESVENTAJAS:");
        System.out.println("   ‚ùå Alto acoplamiento - Hilos dependen de clase espec√≠fica");
        System.out.println("   ‚ùå Dif√≠cil de testear - No se puede inyectar mock");
        System.out.println("   ‚ùå No reutilizable - Valor fijo en 3");
        System.out.println("   ‚ùå Configuraci√≥n inflexible - No se puede cambiar en runtime");
        System.out.println("   ‚ùå Violaci√≥n del principio de inversi√≥n de dependencias");
        
        System.out.println("\nüîß CASOS DE USO APROPIADOS:");
        System.out.println("   ‚úÖ Aplicaciones simples con un solo sem√°foro");
        System.out.println("   ‚úÖ Prototipos r√°pidos y demos");
        System.out.println("   ‚úÖ Sistemas donde la configuraci√≥n nunca cambia");
        System.out.println("   ‚úÖ Cuando la simplicidad es m√°s importante que la flexibilidad");
        
        System.out.println("\n‚ùå CASOS DE USO NO RECOMENDADOS:");
        System.out.println("   ‚ùå Aplicaciones que requieren m√∫ltiples sem√°foros");
        System.out.println("   ‚ùå Sistemas que necesitan configuraci√≥n din√°mica");
        System.out.println("   ‚ùå C√≥digo que requiere testing unitario extensivo");
        System.out.println("   ‚ùå Aplicaciones con diferentes valores de sem√°foro");
        
        System.out.println("\nüìä M√âTRICAS DE CALIDAD:");
        System.out.println("   Acoplamiento:     üî¥ Alto");
        System.out.println("   Cohesi√≥n:         üü¢ Alta");
        System.out.println("   Testabilidad:     üî¥ Baja");
        System.out.println("   Reutilizaci√≥n:    üî¥ Baja");
        System.out.println("   Mantenibilidad:   üü° Media");
        System.out.println("   Simplicidad:      üü¢ Alta");
        
        System.out.println("\nüí° RECOMENDACIONES:");
        System.out.println("   ‚Ä¢ Usar solo para aplicaciones simples y prototipos");
        System.out.println("   ‚Ä¢ Considerar Implementaci√≥n B para sistemas m√°s complejos");
        System.out.println("   ‚Ä¢ Evaluar el uso de java.util.concurrent.Semaphore para producci√≥n");
        System.out.println("   ‚Ä¢ Documentar claramente la dependencia est√°tica");
        
        System.out.println("\n" + "=".repeat(80));
        System.out.println("üéØ CONCLUSI√ìN: La Implementaci√≥n A es ideal para casos simples");
        System.out.println("   donde la simplicidad es m√°s importante que la flexibilidad.");
        System.out.println("=".repeat(80));
    }
}
