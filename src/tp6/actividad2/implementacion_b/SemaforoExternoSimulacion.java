package tp6.actividad2.implementacion_b;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

/**
 * Clase principal para la simulaci√≥n del Sem√°foro Externo - Implementaci√≥n B.
 * Define el sem√°foro en el main y lo pasa por par√°metro a los hilos.
 * Crea 10 hilos que utilizan un sem√°foro general inicializado en 3.
 */
public class SemaforoExternoSimulacion {
    
    public static void main(String[] args) {
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss.SSS");
        String tiempo = LocalTime.now().format(timeFormatter);
        
        System.out.println("=".repeat(80));
        System.out.println("        SEM√ÅFORO GENERAL - IMPLEMENTACI√ìN B (EXTERNO)");
        System.out.println("=".repeat(80));
        System.out.println("[" + tiempo + "] Iniciando simulaci√≥n con sem√°foro externo");
        System.out.println();
        System.out.println("CONFIGURACI√ìN DEL SISTEMA:");
        System.out.println("‚Ä¢ Implementaci√≥n: B - Sem√°foro definido en main y pasado por par√°metro");
        System.out.println("‚Ä¢ Valor inicial del sem√°foro: 3");
        System.out.println("‚Ä¢ N√∫mero de hilos: 10");
        System.out.println("‚Ä¢ Tiempo de sue√±o por hilo: 5 segundos");
        System.out.println("‚Ä¢ Tipo de acceso: M√©todos de instancia");
        System.out.println("‚Ä¢ Acoplamiento: Bajo (inyecci√≥n de dependencias)");
        System.out.println("=".repeat(80));
        System.out.println();
        
        // Registrar tiempo de inicio
        long tiempoInicioTotal = System.currentTimeMillis();
        
        // Crear el sem√°foro externo en el main (Implementaci√≥n B)
        SemaforoExterno semaforo = new SemaforoExterno(3, "Semaforo-Principal");
        
        // Mostrar configuraci√≥n del sem√°foro
        System.out.println(semaforo.getConfiguracion());
        System.out.println();
        System.out.println("Estado inicial: " + semaforo.getInfoResumida());
        System.out.println();
        
        // Crear lista de hilos
        List<HiloSemaforoExterno> hilos = new ArrayList<>();
        
        // Crear 10 hilos pasando el sem√°foro por par√°metro
        tiempo = LocalTime.now().format(timeFormatter);
        System.out.println("[" + tiempo + "] üîß Creando 10 hilos con inyecci√≥n de dependencias...");
        
        for (int i = 1; i <= 10; i++) {
            String nombreHilo = "Hilo-" + String.format("%02d", i);
            
            // Demostrar flexibilidad: algunos hilos usan tryAcquire
            boolean usarTryAcquire = (i % 4 == 0); // Cada 4to hilo usa tryAcquire
            
            HiloSemaforoExterno hilo = new HiloSemaforoExterno(nombreHilo, semaforo, usarTryAcquire);
            hilos.add(hilo);
            
            String metodo = usarTryAcquire ? " (con tryAcquire)" : " (con acquire)";
            System.out.println("   ‚úÖ " + nombreHilo + " creado" + metodo);
        }
        
        System.out.println();
        tiempo = LocalTime.now().format(timeFormatter);
        System.out.println("[" + tiempo + "] üöÄ INICIANDO TODOS LOS HILOS");
        System.out.println("Estado del sem√°foro: " + semaforo.getInfoResumida());
        System.out.println("=".repeat(50));
        
        // Iniciar todos los hilos
        for (HiloSemaforoExterno hilo : hilos) {
            hilo.start();
            // Peque√±o delay para observar mejor el orden
            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
        
        // Crear hilo monitor para mostrar estad√≠sticas peri√≥dicas
        Thread monitor = new Thread(() -> {
            try {
                while (!Thread.currentThread().isInterrupted()) {
                    Thread.sleep(3000); // Cada 3 segundos
                    semaforo.mostrarEstado();
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }, "Monitor-Estadisticas-Externo");
        
        monitor.start();
        
        System.out.println("‚è≥ Esperando que todos los hilos completen su ejecuci√≥n...");
        System.out.println("üìä Observar el orden de ejecuci√≥n y el comportamiento del sem√°foro");
        System.out.println("üîç Notar la flexibilidad de la inyecci√≥n de dependencias");
        System.out.println();
        
        // Esperar a que todos los hilos terminen
        for (HiloSemaforoExterno hilo : hilos) {
            try {
                hilo.join(); // Esperar a que termine cada hilo
            } catch (InterruptedException e) {
                System.err.println("‚ùå Interrupci√≥n durante la espera del hilo: " + hilo.getName());
                Thread.currentThread().interrupt();
            }
        }
        
        // Detener el monitor
        monitor.interrupt();
        try {
            monitor.join(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        // Calcular tiempo total
        long tiempoFinTotal = System.currentTimeMillis();
        long tiempoTotal = tiempoFinTotal - tiempoInicioTotal;
        
        // Mostrar estad√≠sticas finales
        mostrarEstadisticasFinales(semaforo, hilos, tiempoTotal);
        
        // Demostrar caracter√≠sticas de la Implementaci√≥n B
        demostrarCaracteristicasImplementacionB(semaforo);
        
        // Comparar con Implementaci√≥n A
        compararImplementaciones();
    }
    
    /**
     * Muestra las estad√≠sticas finales de la simulaci√≥n
     */
    private static void mostrarEstadisticasFinales(SemaforoExterno semaforo, 
                                                  List<HiloSemaforoExterno> hilos, 
                                                  long tiempoTotal) {
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss.SSS");
        String tiempo = LocalTime.now().format(timeFormatter);
        
        System.out.println();
        System.out.println("=".repeat(80));
        System.out.println("           ESTAD√çSTICAS FINALES - IMPLEMENTACI√ìN B");
        System.out.println("=".repeat(80));
        System.out.println("[" + tiempo + "] Simulaci√≥n completada");
        System.out.println();
        
        // Estad√≠sticas del sem√°foro
        int[] statsSemaforo = semaforo.getEstadisticas();
        System.out.println("üîí ESTAD√çSTICAS DEL SEM√ÅFORO EXTERNO:");
        System.out.println("   Identificador: " + semaforo.getIdentificador());
        System.out.println("   Valor inicial: " + semaforo.getValorInicial());
        System.out.println("   Valor final: " + statsSemaforo[0]);
        System.out.println("   Total adquisiciones: " + statsSemaforo[1]);
        System.out.println("   Total liberaciones: " + statsSemaforo[2]);
        System.out.println("   Hilos esperando al final: " + statsSemaforo[3]);
        System.out.println("   Balance (A-L): " + (statsSemaforo[1] - statsSemaforo[2]));
        System.out.println("   Estado final: " + (semaforo.estaEnEstadoInicial() ? "‚úÖ RESTAURADO" : "‚ö†Ô∏è INCONSISTENTE"));
        System.out.println();
        
        // Estad√≠sticas de hilos
        int completados = 0;
        int esperaron = 0;
        int usaronTryAcquire = 0;
        long tiempoEsperaTotal = 0;
        long tiempoEsperaMaximo = 0;
        long tiempoEsperaMinimo = Long.MAX_VALUE;
        
        System.out.println("üßµ ESTAD√çSTICAS DE HILOS:");
        for (HiloSemaforoExterno hilo : hilos) {
            if (hilo.isCompletoEjecucion()) {
                completados++;
            }
            
            if (hilo.isUsoTryAcquire()) {
                usaronTryAcquire++;
            }
            
            long tiempoEspera = hilo.getTiempoEspera();
            if (hilo.tuvoQueEsperar()) {
                esperaron++;
                tiempoEsperaTotal += tiempoEspera;
                tiempoEsperaMaximo = Math.max(tiempoEsperaMaximo, tiempoEspera);
                tiempoEsperaMinimo = Math.min(tiempoEsperaMinimo, tiempoEspera);
            }
        }
        
        System.out.println("   Total hilos: " + hilos.size());
        System.out.println("   Completados exitosamente: " + completados);
        System.out.println("   Hilos que esperaron: " + esperaron);
        System.out.println("   Hilos que usaron tryAcquire: " + usaronTryAcquire);
        System.out.println("   Tasa de finalizaci√≥n: " + 
                          String.format("%.1f%%", (completados * 100.0 / hilos.size())));
        
        if (esperaron > 0) {
            double tiempoPromedioEspera = tiempoEsperaTotal / (double) esperaron;
            System.out.println("   Tiempo promedio de espera: " + String.format("%.0f", tiempoPromedioEspera) + "ms");
            System.out.println("   Tiempo m√°ximo de espera: " + tiempoEsperaMaximo + "ms");
            System.out.println("   Tiempo m√≠nimo de espera: " + (tiempoEsperaMinimo == Long.MAX_VALUE ? 0 : tiempoEsperaMinimo) + "ms");
        }
        System.out.println();
        
        // An√°lisis temporal
        System.out.println("‚è±Ô∏è AN√ÅLISIS TEMPORAL:");
        double tiempoTotalSegundos = tiempoTotal / 1000.0;
        System.out.println("   Tiempo total de simulaci√≥n: " + String.format("%.1f", tiempoTotalSegundos) + "s");
        System.out.println("   Tiempo te√≥rico m√≠nimo: 15.0s (3 grupos √ó 5s)");
        System.out.println("   Tiempo te√≥rico m√°ximo: 50.0s (10 hilos √ó 5s)");
        
        if (tiempoTotalSegundos <= 20) {
            System.out.println("   Eficiencia: ‚úÖ EXCELENTE (paralelizaci√≥n √≥ptima)");
        } else if (tiempoTotalSegundos <= 30) {
            System.out.println("   Eficiencia: ‚úÖ BUENA (paralelizaci√≥n efectiva)");
        } else {
            System.out.println("   Eficiencia: ‚ö†Ô∏è MEJORABLE (poca paralelizaci√≥n)");
        }
        System.out.println();
        
        // An√°lisis de eficiencia por hilo
        double eficienciaPromedio = hilos.stream()
            .filter(HiloSemaforoExterno::isCompletoEjecucion)
            .mapToDouble(HiloSemaforoExterno::calcularEficiencia)
            .average()
            .orElse(0.0);
        
        System.out.println("üìä AN√ÅLISIS DE EFICIENCIA:");
        System.out.println("   Eficiencia promedio por hilo: " + String.format("%.1f%%", eficienciaPromedio));
        
        if (eficienciaPromedio >= 80) {
            System.out.println("   Rendimiento: ‚úÖ EXCELENTE (>80%)");
        } else if (eficienciaPromedio >= 60) {
            System.out.println("   Rendimiento: ‚úÖ BUENO (>60%)");
        } else {
            System.out.println("   Rendimiento: ‚ö†Ô∏è MEJORABLE (<60%)");
        }
        System.out.println();
        
        // Detalles por hilo
        System.out.println("üìã DETALLES POR HILO:");
        for (HiloSemaforoExterno hilo : hilos) {
            System.out.println("   " + hilo.getEstadisticasDetalladas());
        }
        System.out.println();
        
        // An√°lisis del comportamiento del sem√°foro
        System.out.println("üîç AN√ÅLISIS DEL COMPORTAMIENTO:");
        System.out.println("   M√°ximo hilos simult√°neos: 3 (limitado por sem√°foro)");
        System.out.println("   Hilos que accedieron inmediatamente: " + (hilos.size() - esperaron));
        System.out.println("   Hilos que tuvieron que esperar: " + esperaron);
        System.out.println("   Flexibilidad demostrada: " + usaronTryAcquire + " hilos usaron tryAcquire");
        
        if (esperaron == 7) { // 10 - 3 = 7 hilos deber√≠an esperar
            System.out.println("   Comportamiento: ‚úÖ CORRECTO (7 hilos esperaron como se esperaba)");
        } else {
            System.out.println("   Comportamiento: ‚ö†Ô∏è INESPERADO (" + esperaron + " hilos esperaron)");
        }
    }
    
    /**
     * Demuestra las caracter√≠sticas espec√≠ficas de la Implementaci√≥n B
     */
    private static void demostrarCaracteristicasImplementacionB(SemaforoExterno semaforo) {
        System.out.println();
        System.out.println("=".repeat(80));
        System.out.println("         CARACTER√çSTICAS DE LA IMPLEMENTACI√ìN B");
        System.out.println("=".repeat(80));
        
        System.out.println("\nüèóÔ∏è ARQUITECTURA:");
        System.out.println("   ‚úÖ Sem√°foro definido en main y pasado por par√°metro");
        System.out.println("   ‚úÖ Acceso mediante m√©todos de instancia");
        System.out.println("   ‚úÖ Inyecci√≥n de dependencias expl√≠cita");
        System.out.println("   ‚úÖ Configuraci√≥n flexible (valor inicial configurable)");
        System.out.println("   ‚úÖ Identificador personalizable: " + semaforo.getIdentificador());
        
        System.out.println("\nüëç VENTAJAS:");
        System.out.println("   ‚úÖ Bajo acoplamiento - Hilos no dependen de clase espec√≠fica");
        System.out.println("   ‚úÖ F√°cil de testear - Se puede inyectar mock del sem√°foro");
        System.out.println("   ‚úÖ Altamente reutilizable - Diferentes valores y configuraciones");
        System.out.println("   ‚úÖ Configuraci√≥n flexible - Valor inicial y comportamiento configurable");
        System.out.println("   ‚úÖ M√∫ltiples instancias - Varios sem√°foros independientes");
        System.out.println("   ‚úÖ Principio de inversi√≥n de dependencias respetado");
        
        System.out.println("\nüëé DESVENTAJAS:");
        System.out.println("   ‚ùå M√°s c√≥digo de configuraci√≥n - Requiere crear y pasar instancia");
        System.out.println("   ‚ùå Gesti√≥n de instancias - Responsabilidad del c√≥digo cliente");
        System.out.println("   ‚ùå Posible p√©rdida de referencia - Si no se gestiona correctamente");
        System.out.println("   ‚ùå Complejidad inicial - M√°s conceptos para entender");
        
        System.out.println("\nüîß CASOS DE USO APROPIADOS:");
        System.out.println("   ‚úÖ Aplicaciones complejas con m√∫ltiples sem√°foros");
        System.out.println("   ‚úÖ Sistemas que requieren configuraci√≥n din√°mica");
        System.out.println("   ‚úÖ C√≥digo que necesita testing unitario extensivo");
        System.out.println("   ‚úÖ Aplicaciones con diferentes valores de sem√°foro");
        System.out.println("   ‚úÖ Sistemas distribuidos o modulares");
        System.out.println("   ‚úÖ Frameworks y librer√≠as reutilizables");
        
        System.out.println("\n‚úÖ CASOS DE USO RECOMENDADOS:");
        System.out.println("   ‚úÖ Aplicaciones de producci√≥n");
        System.out.println("   ‚úÖ Sistemas con requisitos de calidad altos");
        System.out.println("   ‚úÖ C√≥digo que debe ser mantenible a largo plazo");
        System.out.println("   ‚úÖ Proyectos con equipos de desarrollo grandes");
        
        System.out.println("\nüìä M√âTRICAS DE CALIDAD:");
        System.out.println("   Acoplamiento:     üü¢ Bajo");
        System.out.println("   Cohesi√≥n:         üü¢ Alta");
        System.out.println("   Testabilidad:     üü¢ Alta");
        System.out.println("   Reutilizaci√≥n:    üü¢ Alta");
        System.out.println("   Mantenibilidad:   üü¢ Alta");
        System.out.println("   Simplicidad:      üü° Media");
        
        System.out.println("\nüéØ FLEXIBILIDAD DEMOSTRADA:");
        System.out.println("   ‚Ä¢ Valor inicial configurable: " + semaforo.getValorInicial());
        System.out.println("   ‚Ä¢ Identificador personalizado: " + semaforo.getIdentificador());
        System.out.println("   ‚Ä¢ M√©todos adicionales: tryAcquire(), getEstadisticas()");
        System.out.println("   ‚Ä¢ Monitoreo avanzado: estado detallado disponible");
        System.out.println("   ‚Ä¢ Reutilizaci√≥n: mismo sem√°foro para m√∫ltiples hilos");
    }
    
    /**
     * Compara las dos implementaciones (A vs B)
     */
    private static void compararImplementaciones() {
        System.out.println();
        System.out.println("=".repeat(80));
        System.out.println("              COMPARACI√ìN IMPLEMENTACI√ìN A vs B");
        System.out.println("=".repeat(80));
        
        System.out.println("\nüìä TABLA COMPARATIVA:");
        System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        System.out.println("‚îÇ Caracter√≠stica          ‚îÇ Implementaci√≥n A‚îÇ Implementaci√≥n B‚îÇ");
        System.out.println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
        System.out.println("‚îÇ Ubicaci√≥n del sem√°foro  ‚îÇ Dentro de clase ‚îÇ En main()       ‚îÇ");
        System.out.println("‚îÇ Tipo de acceso          ‚îÇ M√©todos est√°ticos‚îÇ M√©todos instancia‚îÇ");
        System.out.println("‚îÇ Acoplamiento            ‚îÇ üî¥ Alto         ‚îÇ üü¢ Bajo         ‚îÇ");
        System.out.println("‚îÇ Testabilidad            ‚îÇ üî¥ Dif√≠cil      ‚îÇ üü¢ F√°cil        ‚îÇ");
        System.out.println("‚îÇ Reutilizaci√≥n           ‚îÇ üî¥ Limitada     ‚îÇ üü¢ Alta         ‚îÇ");
        System.out.println("‚îÇ Configuraci√≥n           ‚îÇ üî¥ Fija         ‚îÇ üü¢ Flexible     ‚îÇ");
        System.out.println("‚îÇ Simplicidad de uso      ‚îÇ üü¢ Alta         ‚îÇ üü° Media        ‚îÇ");
        System.out.println("‚îÇ Mantenibilidad          ‚îÇ üü° Media        ‚îÇ üü¢ Alta         ‚îÇ");
        System.out.println("‚îÇ Escalabilidad           ‚îÇ üî¥ Baja         ‚îÇ üü¢ Alta         ‚îÇ");
        System.out.println("‚îÇ Inyecci√≥n dependencias  ‚îÇ ‚ùå No           ‚îÇ ‚úÖ S√≠           ‚îÇ");
        System.out.println("‚îÇ M√∫ltiples instancias    ‚îÇ ‚ùå No           ‚îÇ ‚úÖ S√≠           ‚îÇ");
        System.out.println("‚îÇ Configuraci√≥n din√°mica  ‚îÇ ‚ùå No           ‚îÇ ‚úÖ S√≠           ‚îÇ");
        System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        
        System.out.println("\nüéØ RECOMENDACIONES DE USO:");
        System.out.println("\nüìö IMPLEMENTACI√ìN A (Sem√°foro Interno):");
        System.out.println("   ‚úÖ Prototipos r√°pidos y demos");
        System.out.println("   ‚úÖ Aplicaciones muy simples");
        System.out.println("   ‚úÖ Casos donde la simplicidad es cr√≠tica");
        System.out.println("   ‚úÖ Proyectos educativos b√°sicos");
        
        System.out.println("\nüè¢ IMPLEMENTACI√ìN B (Sem√°foro Externo):");
        System.out.println("   ‚úÖ Aplicaciones de producci√≥n");
        System.out.println("   ‚úÖ Sistemas complejos y escalables");
        System.out.println("   ‚úÖ C√≥digo que requiere testing extensivo");
        System.out.println("   ‚úÖ Proyectos con m√∫ltiples desarrolladores");
        System.out.println("   ‚úÖ Sistemas que necesitan configuraci√≥n flexible");
        
        System.out.println("\nüí° LECCIONES APRENDIDAS:");
        System.out.println("   ‚Ä¢ La inyecci√≥n de dependencias mejora la testabilidad");
        System.out.println("   ‚Ä¢ El bajo acoplamiento facilita el mantenimiento");
        System.out.println("   ‚Ä¢ La flexibilidad tiene un costo en complejidad inicial");
        System.out.println("   ‚Ä¢ El dise√±o debe balancear simplicidad vs escalabilidad");
        
        System.out.println("\n" + "=".repeat(80));
        System.out.println("üèÜ CONCLUSI√ìN: La Implementaci√≥n B es superior para la mayor√≠a");
        System.out.println("   de casos reales, mientras que la A es √∫til para casos simples.");
        System.out.println("=".repeat(80));
    }
}
