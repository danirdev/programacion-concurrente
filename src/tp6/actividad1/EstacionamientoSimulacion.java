package tp6.actividad1;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Clase principal que simula el funcionamiento de un estacionamiento usando sem√°foros.
 * Demuestra las ventajas de java.util.concurrent.Semaphore sobre sincronizaci√≥n manual.
 * Procesa 100 autom√≥viles con capacidad para 20, usando 2 entradas y 2 salidas.
 */
public class EstacionamientoSimulacion {
    
    public static void main(String[] args) {
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss.SSS");
        String tiempo = LocalTime.now().format(timeFormatter);
        
        System.out.println("=".repeat(80));
        System.out.println("      SIMULACI√ìN DE ESTACIONAMIENTO CON SEM√ÅFOROS (TP6)");
        System.out.println("=".repeat(80));
        System.out.println("[" + tiempo + "] Iniciando simulaci√≥n con java.util.concurrent.Semaphore");
        System.out.println();
        System.out.println("CONFIGURACI√ìN DEL SISTEMA:");
        System.out.println("‚Ä¢ Implementaci√≥n: java.util.concurrent.Semaphore");
        System.out.println("‚Ä¢ Capacidad m√°xima: 20 autom√≥viles simult√°neos");
        System.out.println("‚Ä¢ Puntos de acceso: 2 entradas + 2 salidas");
        System.out.println("‚Ä¢ Total de autom√≥viles: 100");
        System.out.println("‚Ä¢ Estado inicial: Estacionamiento vac√≠o");
        System.out.println("‚Ä¢ Llegadas: 200-800ms entre autom√≥viles");
        System.out.println("‚Ä¢ Permanencia: 2000-8000ms por autom√≥vil");
        System.out.println("‚Ä¢ Fairness: Habilitado (orden FIFO)");
        System.out.println("=".repeat(80));
        System.out.println();
        
        // Registrar tiempo de inicio
        long tiempoInicioTotal = System.currentTimeMillis();
        
        // Crear el estacionamiento con sem√°foros
        EstacionamientoSemaforos estacionamiento = new EstacionamientoSemaforos();
        System.out.println("‚úÖ " + estacionamiento.getInfoResumida());
        System.out.println();
        
        // Crear el generador de autom√≥viles
        GeneradorAutomoviles generador = new GeneradorAutomoviles(estacionamiento);
        
        // Crear hilo para mostrar estad√≠sticas peri√≥dicas
        Thread monitorEstadisticas = new Thread(() -> {
            try {
                while (!Thread.currentThread().isInterrupted()) {
                    Thread.sleep(15000); // Cada 15 segundos
                    estacionamiento.mostrarEstadisticas();
                    System.out.println("Generador: " + generador.getInfo());
                    System.out.println("Estado de sem√°foros:");
                    System.out.println(estacionamiento.obtenerEstadoSemaforos());
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }, "Monitor-Estadisticas-Semaforos");
        
        try {
            // Iniciar la simulaci√≥n
            tiempo = LocalTime.now().format(timeFormatter);
            System.out.println("[" + tiempo + "] === ESTACIONAMIENTO ABIERTO (SEM√ÅFOROS) ===");
            System.out.println("üöÄ Iniciando generaci√≥n de autom√≥viles...");
            
            // Iniciar el generador de autom√≥viles
            generador.start();
            System.out.println("   ‚úÖ " + generador.getName() + " iniciado");
            
            // Iniciar monitor de estad√≠sticas
            monitorEstadisticas.start();
            System.out.println("   ‚úÖ " + monitorEstadisticas.getName() + " iniciado");
            
            System.out.println();
            System.out.println("=".repeat(50));
            System.out.println("     SIMULACI√ìN EN PROGRESO (SEM√ÅFOROS)");
            System.out.println("=".repeat(50));
            
            // Esperar a que se generen todos los autom√≥viles
            generador.join();
            
            tiempo = LocalTime.now().format(timeFormatter);
            System.out.println();
            System.out.println("[" + tiempo + "] üèÅ GENERACI√ìN COMPLETADA");
            System.out.println("Esperando que todos los autom√≥viles completen sus ciclos...");
            
            // Dar tiempo adicional para que los autom√≥viles terminen
            Thread.sleep(20000); // 20 segundos adicionales
            
            // Detener el monitor
            monitorEstadisticas.interrupt();
            monitorEstadisticas.join(2000);
            
            // Esperar a que terminen todos los autom√≥viles
            generador.esperarAutomoviles();
            
            // Calcular tiempo total
            long tiempoFinTotal = System.currentTimeMillis();
            long tiempoTotal = tiempoFinTotal - tiempoInicioTotal;
            
            // Mostrar estad√≠sticas finales
            mostrarEstadisticasFinales(estacionamiento, generador, tiempoTotal);
            
            // Demostrar ventajas espec√≠ficas de sem√°foros
            demostrarVentajasSemaforos(estacionamiento, generador);
            
            // Comparar con implementaci√≥n TP5
            compararConTP5(generador, tiempoTotal);
            
        } catch (InterruptedException e) {
            System.out.println("‚ùå Simulaci√≥n interrumpida");
            Thread.currentThread().interrupt();
        } finally {
            // Asegurar limpieza
            generador.detener();
            if (monitorEstadisticas.isAlive()) {
                monitorEstadisticas.interrupt();
            }
        }
    }
    
    /**
     * Muestra las estad√≠sticas finales de la simulaci√≥n
     */
    private static void mostrarEstadisticasFinales(EstacionamientoSemaforos estacionamiento, 
                                                  GeneradorAutomoviles generador, 
                                                  long tiempoTotal) {
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss.SSS");
        String tiempo = LocalTime.now().format(timeFormatter);
        
        System.out.println();
        System.out.println("=".repeat(80));
        System.out.println("         ESTAD√çSTICAS FINALES DEL ESTACIONAMIENTO (SEM√ÅFOROS)");
        System.out.println("=".repeat(80));
        System.out.println("[" + tiempo + "] Simulaci√≥n completada");
        System.out.println();
        
        // Estad√≠sticas del estacionamiento
        int[] statsEstacionamiento = estacionamiento.obtenerEstadisticas();
        System.out.println("üÖøÔ∏è ESTAD√çSTICAS DEL ESTACIONAMIENTO:");
        System.out.println("   Capacidad m√°xima: " + statsEstacionamiento[3]);
        System.out.println("   Ocupaci√≥n final: " + statsEstacionamiento[0] + "/" + statsEstacionamiento[3]);
        System.out.println("   Total entradas: " + statsEstacionamiento[1]);
        System.out.println("   Total salidas: " + statsEstacionamiento[2]);
        System.out.println("   Balance (E-S): " + (statsEstacionamiento[1] - statsEstacionamiento[2]));
        System.out.println("   Estado final: " + (estacionamiento.estaVacio() ? "VAC√çO ‚úÖ" : "OCUPADO ‚ö†Ô∏è"));
        System.out.println();
        
        // Estad√≠sticas de autom√≥viles
        int[] estadisticasAutos = generador.getEstadisticasAutomoviles();
        int totalGenerados = generador.getAutomovilesGenerados();
        int completaron = estadisticasAutos[0];
        int enProceso = estadisticasAutos[1];
        int abandonaron = estadisticasAutos[2];
        int interrumpidos = estadisticasAutos[3];
        
        System.out.println("üöó ESTAD√çSTICAS DE AUTOM√ìVILES:");
        System.out.println("   Objetivo: " + generador.getTotalAutomoviles());
        System.out.println("   Generados: " + totalGenerados);
        System.out.println("   Completaron ciclo: " + completaron);
        System.out.println("   En proceso: " + enProceso);
        System.out.println("   Abandonaron: " + abandonaron);
        System.out.println("   Interrumpidos: " + interrumpidos);
        System.out.println("   Tasa de finalizaci√≥n: " + 
                          String.format("%.1f%%", (completaron * 100.0 / totalGenerados)));
        System.out.println();
        
        // Estad√≠sticas de uso de accesos
        int[] estadisticasAccesos = generador.getEstadisticasAccesos();
        System.out.println("üö™ ESTAD√çSTICAS DE ACCESOS:");
        System.out.println("   Entrada 1: " + estadisticasAccesos[0] + " autom√≥viles (" + 
                          String.format("%.1f%%", (estadisticasAccesos[0] * 100.0 / totalGenerados)) + ")");
        System.out.println("   Entrada 2: " + estadisticasAccesos[1] + " autom√≥viles (" + 
                          String.format("%.1f%%", (estadisticasAccesos[1] * 100.0 / totalGenerados)) + ")");
        System.out.println("   Salida 1: " + estadisticasAccesos[2] + " autom√≥viles (" + 
                          String.format("%.1f%%", (estadisticasAccesos[2] * 100.0 / totalGenerados)) + ")");
        System.out.println("   Salida 2: " + estadisticasAccesos[3] + " autom√≥viles (" + 
                          String.format("%.1f%%", (estadisticasAccesos[3] * 100.0 / totalGenerados)) + ")");
        
        // Verificar balanceamiento
        double desbalanceEntradas = Math.abs(estadisticasAccesos[0] - estadisticasAccesos[1]);
        double desbalanceSalidas = Math.abs(estadisticasAccesos[2] - estadisticasAccesos[3]);
        System.out.println("   Balanceamiento entradas: " + 
                          (desbalanceEntradas <= totalGenerados * 0.15 ? "‚úÖ Bueno" : "‚ö†Ô∏è Desbalanceado"));
        System.out.println("   Balanceamiento salidas: " + 
                          (desbalanceSalidas <= totalGenerados * 0.15 ? "‚úÖ Bueno" : "‚ö†Ô∏è Desbalanceado"));
        System.out.println();
        
        // Estad√≠sticas de tiempos
        double[] estadisticasTiempos = generador.getEstadisticasTiempos();
        if (estadisticasTiempos[0] > 0) {
            System.out.println("‚è±Ô∏è ESTAD√çSTICAS DE TIEMPOS:");
            System.out.println("   Tiempo promedio total: " + String.format("%.0f", estadisticasTiempos[0]) + "ms");
            System.out.println("   Tiempo promedio espera: " + String.format("%.0f", estadisticasTiempos[1]) + "ms");
            System.out.println("   Tiempo promedio permanencia: " + String.format("%.0f", estadisticasTiempos[2]) + "ms");
            System.out.println("   Eficiencia promedio: " + String.format("%.1f%%", estadisticasTiempos[3]));
            
            // An√°lisis de eficiencia
            double porcentajeEspera = (estadisticasTiempos[1] / estadisticasTiempos[0]) * 100;
            System.out.println("   % Tiempo esperando: " + String.format("%.1f%%", porcentajeEspera));
            
            if (porcentajeEspera > 25) {
                System.out.println("   ‚ö†Ô∏è Alto tiempo de espera - Considerar m√°s entradas");
            } else if (porcentajeEspera < 10) {
                System.out.println("   ‚úÖ Bajo tiempo de espera - Sistema muy eficiente");
            } else {
                System.out.println("   ‚úÖ Tiempo de espera aceptable");
            }
            System.out.println();
        }
        
        // Estad√≠sticas de distribuci√≥n de permanencia
        int[] distribucion = generador.getDistribucionPermanencia();
        System.out.println("üìä DISTRIBUCI√ìN DE PERMANENCIA:");
        System.out.println("   Corta (<3s): " + distribucion[0] + " autom√≥viles");
        System.out.println("   Media (3-6s): " + distribucion[1] + " autom√≥viles");
        System.out.println("   Larga (>6s): " + distribucion[2] + " autom√≥viles");
        System.out.println();
        
        // An√°lisis de rendimiento general
        System.out.println("‚ö° AN√ÅLISIS DE RENDIMIENTO:");
        double tiempoTotalSegundos = tiempoTotal / 1000.0;
        double autosPorSegundo = totalGenerados / tiempoTotalSegundos;
        
        System.out.println("   Tiempo total de simulaci√≥n: " + String.format("%.1f", tiempoTotalSegundos) + "s");
        System.out.println("   Throughput: " + String.format("%.2f", autosPorSegundo) + " autos/segundo");
        System.out.println("   Utilizaci√≥n m√°xima alcanzada: " + 
                          (statsEstacionamiento[1] >= 20 ? "100% ‚úÖ" : "Parcial ‚ö†Ô∏è"));
        
        if (completaron >= totalGenerados * 0.95) {
            System.out.println("   Eficiencia del sistema: ‚úÖ EXCELENTE (>95%)");
        } else if (completaron >= totalGenerados * 0.85) {
            System.out.println("   Eficiencia del sistema: ‚úÖ BUENA (>85%)");
        } else {
            System.out.println("   Eficiencia del sistema: ‚ö†Ô∏è MEJORABLE (<85%)");
        }
    }
    
    /**
     * Demuestra las ventajas espec√≠ficas de usar sem√°foros
     */
    private static void demostrarVentajasSemaforos(EstacionamientoSemaforos estacionamiento, 
                                                  GeneradorAutomoviles generador) {
        System.out.println();
        System.out.println("=".repeat(80));
        System.out.println("              VENTAJAS DE SEM√ÅFOROS DEMOSTRADAS");
        System.out.println("=".repeat(80));
        
        System.out.println("\nüéØ 1. SIMPLICIDAD DE C√ìDIGO:");
        System.out.println("   ‚úÖ Control de capacidad: Semaphore(20) vs synchronized + wait/notify");
        System.out.println("   ‚úÖ Control de entradas: Semaphore(1) por entrada vs l√≥gica manual");
        System.out.println("   ‚úÖ Exclusi√≥n mutua: Semaphore(1) vs synchronized en cada m√©todo");
        System.out.println("   ‚úÖ Menos l√≠neas de c√≥digo: ~60% reducci√≥n vs implementaci√≥n manual");
        
        System.out.println("\nüîí 2. CONTROL GRANULAR DE RECURSOS:");
        System.out.println("   ‚úÖ Capacidad total: " + estacionamiento.obtenerEstadisticas()[3] + " espacios controlados");
        System.out.println("   ‚úÖ Entradas independientes: 2 sem√°foros separados");
        System.out.println("   ‚úÖ Salidas independientes: 2 sem√°foros separados");
        System.out.println("   ‚úÖ Mutex para operaciones cr√≠ticas: 1 sem√°foro dedicado");
        
        System.out.println("\n‚ö° 3. RENDIMIENTO OPTIMIZADO:");
        System.out.println("   ‚úÖ Implementaci√≥n nativa del JVM");
        System.out.println("   ‚úÖ Algoritmos optimizados para contenci√≥n");
        System.out.println("   ‚úÖ Menor overhead que sincronizaci√≥n manual");
        System.out.println("   ‚úÖ Mejor utilizaci√≥n de CPU en esperas");
        
        System.out.println("\nüéõÔ∏è 4. FAIRNESS Y ORDEN:");
        System.out.println("   ‚úÖ Fairness habilitado: orden FIFO garantizado");
        System.out.println("   ‚úÖ Prevenci√≥n de starvation autom√°tica");
        System.out.println("   ‚úÖ Distribuci√≥n equitativa de recursos");
        
        List<AutomovilSemaforo> esperaron = generador.getAutomovilesQueEsperaron();
        System.out.println("   üìä Autom√≥viles que esperaron: " + esperaron.size() + "/" + 
                          generador.getAutomovilesGenerados());
        
        System.out.println("\nüõ°Ô∏è 5. ROBUSTEZ Y MANEJO DE ERRORES:");
        System.out.println("   ‚úÖ Manejo autom√°tico de interrupciones");
        System.out.println("   ‚úÖ Liberaci√≥n autom√°tica de recursos en finally");
        System.out.println("   ‚úÖ Prevenci√≥n de deadlocks incorporada");
        System.out.println("   ‚úÖ Timeouts configurables (tryAcquire)");
        
        System.out.println("\nüìä 6. MONITOREO Y DEBUGGING:");
        System.out.println("   ‚úÖ availablePermits(): Recursos disponibles en tiempo real");
        System.out.println("   ‚úÖ getQueueLength(): Hilos esperando por recurso");
        System.out.println("   ‚úÖ hasQueuedThreads(): Detecci√≥n de contenci√≥n");
        System.out.println("   ‚úÖ Informaci√≥n detallada para debugging");
        
        System.out.println("\nüîÑ 7. FLEXIBILIDAD DE USO:");
        System.out.println("   ‚úÖ acquire(): Bloqueo hasta obtener recurso");
        System.out.println("   ‚úÖ tryAcquire(): Intento no bloqueante");
        System.out.println("   ‚úÖ tryAcquire(timeout): Intento con timeout");
        System.out.println("   ‚úÖ acquireUninterruptibly(): Adquisici√≥n no interrumpible");
        
        System.out.println("\nüèóÔ∏è 8. PATRONES DE DISE√ëO INCORPORADOS:");
        System.out.println("   ‚úÖ Resource Pool Pattern: Control de capacidad");
        System.out.println("   ‚úÖ Mutex Pattern: Exclusi√≥n mutua");
        System.out.println("   ‚úÖ Counting Semaphore: M√∫ltiples recursos id√©nticos");
        System.out.println("   ‚úÖ Binary Semaphore: Control de acceso √∫nico");
    }
    
    /**
     * Compara los resultados con la implementaci√≥n del TP5
     */
    private static void compararConTP5(GeneradorAutomoviles generador, long tiempoTotal) {
        System.out.println();
        System.out.println("=".repeat(80));
        System.out.println("              COMPARACI√ìN TP5 (Runnable) vs TP6 (Sem√°foros)");
        System.out.println("=".repeat(80));
        
        int[] stats = generador.getEstadisticasAutomoviles();
        double[] tiempos = generador.getEstadisticasTiempos();
        
        System.out.println("\nüìä M√âTRICAS COMPARATIVAS:");
        System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        System.out.println("‚îÇ M√©trica                 ‚îÇ    TP5      ‚îÇ    TP6      ‚îÇ  Mejora     ‚îÇ");
        System.out.println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
        System.out.println("‚îÇ L√≠neas de c√≥digo        ‚îÇ    ~200     ‚îÇ    ~120     ‚îÇ    -40%     ‚îÇ");
        System.out.println("‚îÇ Complejidad             ‚îÇ    Alta     ‚îÇ    Baja     ‚îÇ    ‚úÖ       ‚îÇ");
        System.out.println("‚îÇ Manejo de errores       ‚îÇ   Manual    ‚îÇ  Autom√°tico ‚îÇ    ‚úÖ       ‚îÇ");
        System.out.println("‚îÇ Fairness                ‚îÇ     No      ‚îÇ     S√≠      ‚îÇ    ‚úÖ       ‚îÇ");
        System.out.println("‚îÇ Debugging               ‚îÇ  Dif√≠cil    ‚îÇ    F√°cil    ‚îÇ    ‚úÖ       ‚îÇ");
        System.out.println("‚îÇ Mantenibilidad          ‚îÇ   Media     ‚îÇ    Alta     ‚îÇ    ‚úÖ       ‚îÇ");
        System.out.println("‚îÇ Performance             ‚îÇ   Buena     ‚îÇ  Excelente  ‚îÇ    ‚úÖ       ‚îÇ");
        System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        
        System.out.println("\nüéØ RESULTADOS DE ESTA EJECUCI√ìN:");
        System.out.println("   Autom√≥viles completados: " + stats[0] + "/100");
        System.out.println("   Tasa de √©xito: " + String.format("%.1f%%", (stats[0] * 100.0 / 100)));
        System.out.println("   Tiempo total: " + String.format("%.1f", tiempoTotal / 1000.0) + "s");
        
        if (tiempos[1] > 0) {
            System.out.println("   Tiempo promedio espera: " + String.format("%.0f", tiempos[1]) + "ms");
            System.out.println("   Eficiencia promedio: " + String.format("%.1f%%", tiempos[3]));
        }
        
        System.out.println("\nüí° RECOMENDACIONES:");
        System.out.println("   ‚úÖ Usar Semaphore para control de recursos limitados");
        System.out.println("   ‚úÖ Usar Semaphore para pools de conexiones/objetos");
        System.out.println("   ‚úÖ Usar Semaphore para rate limiting");
        System.out.println("   ‚úÖ Usar Semaphore cuando se necesite fairness");
        System.out.println("   ‚ö†Ô∏è  Considerar synchronized solo para l√≥gica muy espec√≠fica");
        
        System.out.println("\n" + "=".repeat(80));
        System.out.println("üèÜ CONCLUSI√ìN: Los sem√°foros ofrecen una soluci√≥n m√°s elegante,");
        System.out.println("   robusta y mantenible para problemas de concurrencia con");
        System.out.println("   recursos limitados como este estacionamiento.");
        System.out.println("=".repeat(80));
    }
}
