package tp6.actividad3.implementacion_a;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

/**
 * Clase principal para la simulaci√≥n de Estaci√≥n de Peaje - Implementaci√≥n A.
 * Simula 50 autom√≥viles siendo atendidos en 3 cabinas (una cerrada inicialmente).
 * NO individualiza qu√© cabina atiende a cada cliente.
 */
public class PeajeSimpleSimulacion {
    
    public static void main(String[] args) {
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss.SSS");
        String tiempo = LocalTime.now().format(timeFormatter);
        
        System.out.println("=".repeat(80));
        System.out.println("      ESTACI√ìN DE PEAJE - IMPLEMENTACI√ìN A (SIN INDIVIDUALIZAR)");
        System.out.println("=".repeat(80));
        System.out.println("[" + tiempo + "] Iniciando simulaci√≥n de estaci√≥n de peaje");
        System.out.println();
        System.out.println("CONFIGURACI√ìN DEL SISTEMA:");
        System.out.println("‚Ä¢ Implementaci√≥n: A - Sin individualizar cabinas");
        System.out.println("‚Ä¢ Total de autom√≥viles: 50");
        System.out.println("‚Ä¢ Cabinas iniciales: 2 (Cabina 3 cerrada)");
        System.out.println("‚Ä¢ Tiempo de atenci√≥n: 1-3 segundos por cliente");
        System.out.println("‚Ä¢ Cabina 3: Disponible despu√©s de 15 segundos");
        System.out.println("‚Ä¢ Informaci√≥n mostrada: Cliente + tiempo, SIN cabina espec√≠fica");
        System.out.println("=".repeat(80));
        System.out.println();
        
        // Registrar tiempo de inicio
        long tiempoInicioTotal = System.currentTimeMillis();
        
        // Crear la estaci√≥n de peaje
        EstacionPeajeSimple estacionPeaje = new EstacionPeajeSimple();
        System.out.println("Estado inicial: " + estacionPeaje.getInfoResumida());
        System.out.println();
        
        // Crear lista de autom√≥viles (50 clientes)
        List<AutomovilPeaje> automoviles = new ArrayList<>();
        
        // Crear 50 autom√≥viles
        tiempo = LocalTime.now().format(timeFormatter);
        System.out.println("[" + tiempo + "] üîß Creando cola de 50 autom√≥viles...");
        
        for (int i = 1; i <= 50; i++) {
            AutomovilPeaje automovil = new AutomovilPeaje(i, estacionPeaje);
            automoviles.add(automovil);
        }
        
        System.out.println("   ‚úÖ 50 autom√≥viles creados y listos para llegar al peaje");
        System.out.println();
        
        // Crear hilo monitor para mostrar estad√≠sticas peri√≥dicas
        Thread monitor = new Thread(() -> {
            try {
                while (!Thread.currentThread().isInterrupted()) {
                    Thread.sleep(10000); // Cada 10 segundos
                    estacionPeaje.mostrarEstado();
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }, "Monitor-Peaje-Simple");
        
        tiempo = LocalTime.now().format(timeFormatter);
        System.out.println("[" + tiempo + "] üöÄ INICIANDO SIMULACI√ìN DE PEAJE");
        System.out.println("=".repeat(50));
        System.out.println("üìä Los autom√≥viles llegar√°n gradualmente a la estaci√≥n");
        System.out.println("‚è±Ô∏è Observar el impacto cuando se abra la Cabina 3 (15s)");
        System.out.println("üîç Notar que NO se identifica qu√© cabina atiende a cada cliente");
        System.out.println("=".repeat(50));
        System.out.println();
        
        // Iniciar monitor de estad√≠sticas
        monitor.start();
        
        // Iniciar todos los autom√≥viles (llegar√°n con intervalos aleatorios)
        for (AutomovilPeaje automovil : automoviles) {
            automovil.start();
        }
        
        System.out.println("‚è≥ Esperando que todos los autom√≥viles completen el proceso...");
        System.out.println();
        
        // Esperar a que todos los autom√≥viles terminen
        for (AutomovilPeaje automovil : automoviles) {
            try {
                automovil.join(); // Esperar a que termine cada autom√≥vil
            } catch (InterruptedException e) {
                System.err.println("‚ùå Interrupci√≥n durante la espera del autom√≥vil: " + automovil.getName());
                Thread.currentThread().interrupt();
            }
        }
        
        // Detener el monitor
        monitor.interrupt();
        try {
            monitor.join(2000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        // Calcular tiempo total
        long tiempoFinTotal = System.currentTimeMillis();
        long tiempoTotal = tiempoFinTotal - tiempoInicioTotal;
        
        // Mostrar estad√≠sticas finales
        mostrarEstadisticasFinales(estacionPeaje, automoviles, tiempoTotal);
        
        // Demostrar caracter√≠sticas de la Implementaci√≥n A
        demostrarCaracteristicasImplementacionA(estacionPeaje, automoviles);
    }
    
    /**
     * Muestra las estad√≠sticas finales de la simulaci√≥n
     */
    private static void mostrarEstadisticasFinales(EstacionPeajeSimple estacionPeaje, 
                                                  List<AutomovilPeaje> automoviles, 
                                                  long tiempoTotal) {
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss.SSS");
        String tiempo = LocalTime.now().format(timeFormatter);
        
        System.out.println();
        System.out.println("=".repeat(80));
        System.out.println("         ESTAD√çSTICAS FINALES - IMPLEMENTACI√ìN A (SIN INDIVIDUALIZAR)");
        System.out.println("=".repeat(80));
        System.out.println("[" + tiempo + "] Simulaci√≥n completada");
        System.out.println();
        
        // Estad√≠sticas del peaje
        int[] statsEstacion = estacionPeaje.getEstadisticas();
        double[] rendimiento = estacionPeaje.calcularRendimiento();
        
        System.out.println("üè¢ ESTAD√çSTICAS DE LA ESTACI√ìN:");
        System.out.println("   Clientes atendidos: " + statsEstacion[0] + "/50");
        System.out.println("   Clientes esperando al final: " + statsEstacion[1]);
        System.out.println("   Cabinas disponibles al final: " + statsEstacion[2]);
        System.out.println("   Cabina 3 estado final: " + (statsEstacion[3] == 1 ? "‚úÖ DISPONIBLE" : "‚ùå CERRADA"));
        System.out.println("   Throughput: " + String.format("%.1f", rendimiento[0]) + " clientes/minuto");
        System.out.println("   Tiempo promedio por cliente: " + String.format("%.0f", rendimiento[1]) + "ms");
        System.out.println("   Eficiencia del sistema: " + String.format("%.1f%%", rendimiento[2]));
        System.out.println();
        
        // Estad√≠sticas de autom√≥viles
        int completados = 0;
        int esperaron = 0;
        long tiempoEsperaTotal = 0;
        long tiempoEsperaMaximo = 0;
        long tiempoEsperaMinimo = Long.MAX_VALUE;
        long tiempoAtencionTotal = 0;
        int clientesAntesCabina3 = 0;
        
        System.out.println("üöó ESTAD√çSTICAS DE AUTOM√ìVILES:");
        for (AutomovilPeaje automovil : automoviles) {
            if (automovil.isCompletoAtencion()) {
                completados++;
                
                long tiempoEspera = automovil.getTiempoEspera();
                long tiempoAtencion = automovil.getTiempoAtencion();
                
                if (automovil.tuvoQueEsperar()) {
                    esperaron++;
                    tiempoEsperaTotal += tiempoEspera;
                    tiempoEsperaMaximo = Math.max(tiempoEsperaMaximo, tiempoEspera);
                    tiempoEsperaMinimo = Math.min(tiempoEsperaMinimo, tiempoEspera);
                }
                
                if (tiempoAtencion > 0) {
                    tiempoAtencionTotal += tiempoAtencion;
                }
                
                if (automovil.llegoAntesCabina3()) {
                    clientesAntesCabina3++;
                }
            }
        }
        
        System.out.println("   Total autom√≥viles: " + automoviles.size());
        System.out.println("   Completaron proceso: " + completados);
        System.out.println("   Autom√≥viles que esperaron: " + esperaron);
        System.out.println("   Tasa de finalizaci√≥n: " + 
                          String.format("%.1f%%", (completados * 100.0 / automoviles.size())));
        
        if (esperaron > 0) {
            double tiempoPromedioEspera = tiempoEsperaTotal / (double) esperaron;
            System.out.println("   Tiempo promedio de espera: " + String.format("%.0f", tiempoPromedioEspera) + "ms");
            System.out.println("   Tiempo m√°ximo de espera: " + tiempoEsperaMaximo + "ms");
            System.out.println("   Tiempo m√≠nimo de espera: " + (tiempoEsperaMinimo == Long.MAX_VALUE ? 0 : tiempoEsperaMinimo) + "ms");
        }
        
        if (completados > 0) {
            double tiempoPromedioAtencion = tiempoAtencionTotal / (double) completados;
            System.out.println("   Tiempo promedio de atenci√≥n: " + String.format("%.0f", tiempoPromedioAtencion) + "ms");
        }
        
        System.out.println("   Clientes antes de Cabina 3: " + clientesAntesCabina3);
        System.out.println("   Clientes despu√©s de Cabina 3: " + (completados - clientesAntesCabina3));
        System.out.println();
        
        // An√°lisis temporal
        System.out.println("‚è±Ô∏è AN√ÅLISIS TEMPORAL:");
        double tiempoTotalSegundos = tiempoTotal / 1000.0;
        System.out.println("   Tiempo total de simulaci√≥n: " + String.format("%.1f", tiempoTotalSegundos) + "s");
        
        // Estimaciones te√≥ricas
        double tiempoTeoricoSolo2Cabinas = (50 * 2.0) / 2; // 50 segundos con 2 cabinas
        double tiempoTeoricoSolo3Cabinas = (50 * 2.0) / 3; // 33.3 segundos con 3 cabinas
        
        System.out.println("   Tiempo te√≥rico (solo 2 cabinas): " + String.format("%.1f", tiempoTeoricoSolo2Cabinas) + "s");
        System.out.println("   Tiempo te√≥rico (solo 3 cabinas): " + String.format("%.1f", tiempoTeoricoSolo3Cabinas) + "s");
        
        if (tiempoTotalSegundos <= tiempoTeoricoSolo3Cabinas * 1.2) {
            System.out.println("   Rendimiento: ‚úÖ EXCELENTE (cerca del √≥ptimo)");
        } else if (tiempoTotalSegundos <= tiempoTeoricoSolo2Cabinas * 1.2) {
            System.out.println("   Rendimiento: ‚úÖ BUENO (eficiencia aceptable)");
        } else {
            System.out.println("   Rendimiento: ‚ö†Ô∏è MEJORABLE (por debajo del esperado)");
        }
        System.out.println();
        
        // An√°lisis del impacto de la Cabina 3
        System.out.println("üìä IMPACTO DE LA CABINA 3:");
        if (estacionPeaje.isCabina3Disponible()) {
            System.out.println("   ‚úÖ Cabina 3 se abri√≥ correctamente despu√©s de 15s");
            System.out.println("   üìà Mejora te√≥rica de throughput: +50% (2‚Üí3 cabinas)");
            
            double porcentajeAntesCabina3 = (clientesAntesCabina3 * 100.0) / completados;
            System.out.println("   üìä Clientes atendidos antes de Cabina 3: " + 
                             String.format("%.1f%%", porcentajeAntesCabina3));
            
            if (porcentajeAntesCabina3 < 40) {
                System.out.println("   üöÄ Impacto significativo: La mayor√≠a se benefici√≥ de 3 cabinas");
            } else {
                System.out.println("   ‚ö†Ô∏è Impacto limitado: Muchos clientes ya fueron atendidos");
            }
        } else {
            System.out.println("   ‚ùå Cabina 3 no se abri√≥ durante la simulaci√≥n");
        }
        System.out.println();
        
        // Experiencia del cliente
        System.out.println("üòä EXPERIENCIA DEL CLIENTE:");
        int excelente = 0, buena = 0, regular = 0, mala = 0;
        
        for (AutomovilPeaje automovil : automoviles) {
            if (automovil.isCompletoAtencion()) {
                String experiencia = automovil.getExperienciaCliente();
                if (experiencia.contains("Excelente")) excelente++;
                else if (experiencia.contains("Buena")) buena++;
                else if (experiencia.contains("Regular")) regular++;
                else if (experiencia.contains("Mala")) mala++;
            }
        }
        
        System.out.println("   ‚úÖ Excelente (sin espera): " + excelente + " clientes");
        System.out.println("   ‚úÖ Buena (espera corta): " + buena + " clientes");
        System.out.println("   ‚ö†Ô∏è Regular (espera media): " + regular + " clientes");
        System.out.println("   ‚ùå Mala (espera larga): " + mala + " clientes");
        
        double satisfaccion = ((excelente + buena) * 100.0) / completados;
        System.out.println("   üìä √çndice de satisfacci√≥n: " + String.format("%.1f%%", satisfaccion));
    }
    
    /**
     * Demuestra las caracter√≠sticas espec√≠ficas de la Implementaci√≥n A
     */
    private static void demostrarCaracteristicasImplementacionA(EstacionPeajeSimple estacionPeaje, 
                                                               List<AutomovilPeaje> automoviles) {
        System.out.println();
        System.out.println("=".repeat(80));
        System.out.println("         CARACTER√çSTICAS DE LA IMPLEMENTACI√ìN A");
        System.out.println("=".repeat(80));
        
        System.out.println("\nüèóÔ∏è ARQUITECTURA SIN INDIVIDUALIZACI√ìN:");
        System.out.println("   ‚úÖ Sem√°foro simple para control de cabinas disponibles");
        System.out.println("   ‚úÖ No se identifica qu√© cabina espec√≠fica atiende");
        System.out.println("   ‚úÖ Informaci√≥n b√°sica: cliente + tiempo de atenci√≥n");
        System.out.println("   ‚úÖ Implementaci√≥n minimalista y directa");
        
        System.out.println("\nüëç VENTAJAS DEMOSTRADAS:");
        System.out.println("   ‚úÖ Simplicidad m√°xima - C√≥digo f√°cil de entender");
        System.out.println("   ‚úÖ Menos overhead - No tracking de cabinas individuales");
        System.out.println("   ‚úÖ Implementaci√≥n r√°pida - Menos componentes");
        System.out.println("   ‚úÖ Funcionalidad b√°sica completa - Cumple objetivo principal");
        
        System.out.println("\nüëé LIMITACIONES EVIDENTES:");
        System.out.println("   ‚ùå Sin identificaci√≥n de cabina - No se sabe cu√°l atiende");
        System.out.println("   ‚ùå An√°lisis limitado - No se puede optimizar por cabina");
        System.out.println("   ‚ùå Debugging dif√≠cil - Informaci√≥n insuficiente para troubleshooting");
        System.out.println("   ‚ùå Sin estad√≠sticas granulares - No se puede medir rendimiento individual");
        
        System.out.println("\nüîç INFORMACI√ìN DISPONIBLE:");
        System.out.println("   ‚Ä¢ N√∫mero de cliente atendido: ‚úÖ");
        System.out.println("   ‚Ä¢ Tiempo de inicio de atenci√≥n: ‚úÖ");
        System.out.println("   ‚Ä¢ Tiempo de fin de atenci√≥n: ‚úÖ");
        System.out.println("   ‚Ä¢ Cabina espec√≠fica que atiende: ‚ùå NO DISPONIBLE");
        System.out.println("   ‚Ä¢ Rendimiento por cabina: ‚ùå NO DISPONIBLE");
        System.out.println("   ‚Ä¢ Distribuci√≥n de carga: ‚ùå NO DISPONIBLE");
        
        System.out.println("\nüìä M√âTRICAS DISPONIBLES:");
        System.out.println("   ‚úÖ Total de clientes atendidos");
        System.out.println("   ‚úÖ Tiempo promedio de atenci√≥n");
        System.out.println("   ‚úÖ Throughput general del sistema");
        System.out.println("   ‚úÖ Tiempo total de operaci√≥n");
        System.out.println("   ‚ùå Utilizaci√≥n individual por cabina");
        System.out.println("   ‚ùå Balanceamiento de carga");
        System.out.println("   ‚ùå Identificaci√≥n de cuellos de botella espec√≠ficos");
        
        System.out.println("\nüéØ CASOS DE USO APROPIADOS:");
        System.out.println("   ‚úÖ Prototipos y demos r√°pidas");
        System.out.println("   ‚úÖ Sistemas simples sin necesidad de an√°lisis detallado");
        System.out.println("   ‚úÖ Aplicaciones donde solo importa el throughput general");
        System.out.println("   ‚úÖ Casos donde la simplicidad es m√°s importante que la informaci√≥n");
        
        System.out.println("\n‚ùå CASOS DONDE NO ES SUFICIENTE:");
        System.out.println("   ‚ùå Sistemas de producci√≥n que requieren monitoreo detallado");
        System.out.println("   ‚ùå Aplicaciones que necesitan optimizaci√≥n por recurso");
        System.out.println("   ‚ùå Sistemas donde se debe identificar cuellos de botella");
        System.out.println("   ‚ùå Casos que requieren balanceamiento de carga");
        
        System.out.println("\nüí° PREGUNTA CLAVE DEL ENUNCIADO:");
        System.out.println("   ‚ùì '¬øSer√° posible individualizar cada cabina?'");
        System.out.println("   ‚úÖ RESPUESTA: S√ç, es posible y necesario para an√°lisis detallado");
        System.out.println("   üîß SOLUCI√ìN: Implementaci√≥n B con tracking de cabinas individuales");
        
        System.out.println("\n" + "=".repeat(80));
        System.out.println("üéØ CONCLUSI√ìN: La Implementaci√≥n A es funcional pero limitada.");
        System.out.println("   Para casos reales se necesita la Implementaci√≥n B con");
        System.out.println("   individualizaci√≥n de cabinas para an√°lisis y optimizaci√≥n.");
        System.out.println("=".repeat(80));
    }
}
