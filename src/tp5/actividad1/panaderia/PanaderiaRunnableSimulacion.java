package tp5.actividad1.panaderia;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

/**
 * Clase principal que simula el funcionamiento de una panader√≠a usando interfaz Runnable.
 * Coordina la producci√≥n de bizcochos y facturas, y la llegada de clientes.
 * Versi√≥n mejorada del TP4 demostrando las ventajas de Runnable vs Thread.
 */
public class PanaderiaRunnableSimulacion {
    
    public static void main(String[] args) {
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
        String tiempo = LocalTime.now().format(timeFormatter);
        
        System.out.println("=".repeat(80));
        System.out.println("        SIMULACI√ìN DE PANADER√çA CON INTERFAZ RUNNABLE");
        System.out.println("=".repeat(80));
        System.out.println("[" + tiempo + "] Iniciando panader√≠a...");
        System.out.println();
        System.out.println("CONFIGURACI√ìN:");
        System.out.println("‚Ä¢ Implementaci√≥n: Interfaz Runnable (vs Thread del TP4)");
        System.out.println("‚Ä¢ Horno Bizcochos: 400-600ms por unidad");
        System.out.println("‚Ä¢ Horno Facturas: 1000-1300ms por unidad");
        System.out.println("‚Ä¢ Llegada Clientes: 800-1500ms entre llegadas");
        System.out.println("‚Ä¢ Compra Cliente: 200-400ms (1 Bizcocho + 1 Factura)");
        System.out.println("‚Ä¢ Duraci√≥n: 45 segundos de simulaci√≥n");
        System.out.println("=".repeat(80));
        System.out.println();
        
        // Crear el mostrador compartido
        MostradorRunnable mostrador = new MostradorRunnable();
        
        // Crear las tareas Runnable
        ProductorBizcochos hornoBizcochos = new ProductorBizcochos(mostrador, 1);
        ProductorFacturas hornoFacturas = new ProductorFacturas(mostrador, 1);
        GeneradorClientes generadorClientes = new GeneradorClientes(mostrador);
        
        // Listas para gestionar hilos
        List<Thread> hilosPrincipales = new ArrayList<>();
        List<Runnable> tareasRunnable = new ArrayList<>();
        
        // Agregar tareas a la lista para demostrar flexibilidad
        tareasRunnable.add(hornoBizcochos);
        tareasRunnable.add(hornoFacturas);
        tareasRunnable.add(generadorClientes);
        
        // Crear hilos usando las tareas Runnable
        Thread hiloHornoBizcochos = new Thread(hornoBizcochos, "Hilo-Horno-Bizcochos");
        Thread hiloHornoFacturas = new Thread(hornoFacturas, "Hilo-Horno-Facturas");
        Thread hiloGeneradorClientes = new Thread(generadorClientes, "Hilo-Generador-Clientes");
        
        hilosPrincipales.add(hiloHornoBizcochos);
        hilosPrincipales.add(hiloHornoFacturas);
        hilosPrincipales.add(hiloGeneradorClientes);
        
        // Crear hilo para mostrar estad√≠sticas peri√≥dicas
        Runnable monitorEstadisticas = () -> {
            try {
                while (!Thread.currentThread().isInterrupted()) {
                    Thread.sleep(15000); // Cada 15 segundos
                    mostrador.mostrarEstado();
                    System.out.println("Hornos activos: " + hornoBizcochos.getInfo() + " | " + hornoFacturas.getInfo());
                    System.out.println("Generador: " + generadorClientes.getInfo());
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        };
        
        Thread hiloMonitor = new Thread(monitorEstadisticas, "Monitor-Estadisticas-Runnable");
        
        try {
            // Iniciar todos los hilos
            tiempo = LocalTime.now().format(timeFormatter);
            System.out.println("[" + tiempo + "] === PANADER√çA EN FUNCIONAMIENTO (RUNNABLE) ===");
            
            // Demostrar flexibilidad de Runnable: iniciar hilos de diferentes maneras
            System.out.println("üöÄ Iniciando hilos usando diferentes m√©todos Runnable:");
            
            // M√©todo 1: Thread tradicional con Runnable
            hiloHornoBizcochos.start();
            System.out.println("   ‚úÖ " + hiloHornoBizcochos.getName() + " - Thread(Runnable)");
            
            // M√©todo 2: Usando m√©todo helper de la clase
            Thread hiloFacturas = hornoFacturas.iniciarEnHilo();
            System.out.println("   ‚úÖ " + hiloFacturas.getName() + " - M√©todo helper");
            
            // M√©todo 3: Thread directo con Runnable
            hiloGeneradorClientes.start();
            System.out.println("   ‚úÖ " + hiloGeneradorClientes.getName() + " - Thread directo");
            
            hiloMonitor.start();
            System.out.println("   ‚úÖ " + hiloMonitor.getName() + " - Lambda Runnable");
            
            // Ejecutar simulaci√≥n por 45 segundos
            Thread.sleep(45000); // 45 segundos
            
            // Detener todos los hilos usando m√©todos de control de Runnable
            tiempo = LocalTime.now().format(timeFormatter);
            System.out.println();
            System.out.println("[" + tiempo + "] === CERRANDO PANADER√çA (RUNNABLE) ===");
            
            // Demostrar control granular con Runnable
            System.out.println("üõë Deteniendo tareas usando m√©todos de control Runnable:");
            
            hornoBizcochos.detener();
            System.out.println("   ‚úÖ Horno Bizcochos detenido (m√©todo detener())");
            
            hornoFacturas.detener();
            System.out.println("   ‚úÖ Horno Facturas detenido (m√©todo detener())");
            
            generadorClientes.detener();
            System.out.println("   ‚úÖ Generador Clientes detenido (m√©todo detener())");
            
            hiloMonitor.interrupt();
            System.out.println("   ‚úÖ Monitor detenido (interrupt())");
            
            // Esperar a que terminen los hilos principales
            for (Thread hilo : hilosPrincipales) {
                hilo.join(2000);
            }
            hiloFacturas.join(2000);
            hiloMonitor.join(1000);
            
            // Esperar a que terminen los clientes
            generadorClientes.esperarClientes();
            
            // Mostrar estad√≠sticas finales
            mostrarEstadisticasFinales(mostrador, hornoBizcochos, hornoFacturas, generadorClientes);
            
            // Demostrar ventajas espec√≠ficas de Runnable
            demostrarVentajasRunnable(tareasRunnable, generadorClientes);
            
        } catch (InterruptedException e) {
            System.out.println("Simulaci√≥n interrumpida");
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * Muestra las estad√≠sticas finales de la simulaci√≥n
     */
    private static void mostrarEstadisticasFinales(MostradorRunnable mostrador, 
                                                  ProductorBizcochos hornoBizcochos,
                                                  ProductorFacturas hornoFacturas,
                                                  GeneradorClientes generadorClientes) {
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
        String tiempo = LocalTime.now().format(timeFormatter);
        
        System.out.println();
        System.out.println("=".repeat(80));
        System.out.println("              ESTAD√çSTICAS FINALES (RUNNABLE)");
        System.out.println("=".repeat(80));
        System.out.println("[" + tiempo + "] Simulaci√≥n completada");
        System.out.println();
        
        // Estad√≠sticas de producci√≥n
        System.out.println("üìä PRODUCCI√ìN (Runnable):");
        System.out.println("   Bizcochos producidos: " + hornoBizcochos.getBizcochosProcidos());
        System.out.println("   Facturas producidas:  " + hornoFacturas.getFacturasProducidas());
        System.out.println("   Ratio B/F:            " + 
                          String.format("%.2f", (double)hornoBizcochos.getBizcochosProcidos() / 
                                               hornoFacturas.getFacturasProducidas()));
        System.out.println("   Estado hornos:        " + hornoBizcochos.getInfo() + " | " + hornoFacturas.getInfo());
        System.out.println();
        
        // Estad√≠sticas de inventario
        System.out.println("üì¶ INVENTARIO FINAL:");
        System.out.println("   " + mostrador.getInfoResumida());
        System.out.println();
        
        // Estad√≠sticas de clientes
        int[] estadisticasClientes = generadorClientes.getEstadisticasClientes();
        int clientesAtendidos = estadisticasClientes[0];
        int clientesNoAtendidos = estadisticasClientes[1];
        int clientesActivos = estadisticasClientes[2];
        int totalClientes = generadorClientes.getClientesGenerados();
        
        System.out.println("üë• CLIENTES (Runnable):");
        System.out.println("   Clientes generados:    " + totalClientes);
        System.out.println("   Clientes atendidos:    " + clientesAtendidos);
        System.out.println("   Clientes no atendidos: " + clientesNoAtendidos);
        System.out.println("   Clientes activos:      " + clientesActivos);
        System.out.println("   Tasa de atenci√≥n:      " + 
                          String.format("%.1f%%", (double)clientesAtendidos / totalClientes * 100));
        System.out.println("   Hilos de clientes:     " + generadorClientes.getHilosClientes().size());
        System.out.println();
        
        // An√°lisis de rendimiento
        System.out.println("‚ö° AN√ÅLISIS DE RENDIMIENTO:");
        double bizcochosPorMinuto = hornoBizcochos.getBizcochosProcidos() * (60.0 / 45.0); // Extrapolado a 1 minuto
        double facturasPorMinuto = hornoFacturas.getFacturasProducidas() * (60.0 / 45.0);
        double clientesPorMinuto = totalClientes * (60.0 / 45.0);
        
        System.out.println("   Bizcochos/minuto:      " + String.format("%.1f", bizcochosPorMinuto));
        System.out.println("   Facturas/minuto:       " + String.format("%.1f", facturasPorMinuto));
        System.out.println("   Clientes/minuto:       " + String.format("%.1f", clientesPorMinuto));
        System.out.println("   Capacidad te√≥rica:     " + String.format("%.1f ventas/min", 
                                                                        Math.min(bizcochosPorMinuto, facturasPorMinuto)));
    }
    
    /**
     * Demuestra las ventajas espec√≠ficas de usar Runnable vs Thread
     */
    private static void demostrarVentajasRunnable(List<Runnable> tareas, 
                                                GeneradorClientes generadorClientes) {
        System.out.println();
        System.out.println("=".repeat(80));
        System.out.println("           VENTAJAS DE RUNNABLE DEMOSTRADAS EN PANADER√çA");
        System.out.println("=".repeat(80));
        
        System.out.println("\nüéØ 1. FLEXIBILIDAD DE CREACI√ìN DE HILOS:");
        System.out.println("   ‚úÖ M√∫ltiples formas de crear hilos con la misma tarea");
        System.out.println("   ‚úÖ Thread(Runnable), m√©todos helper, lambdas");
        System.out.println("   ‚úÖ Reutilizaci√≥n de tareas en diferentes contextos");
        
        System.out.println("\nüîÑ 2. GESTI√ìN MEJORADA DE TAREAS:");
        System.out.println("   ‚úÖ Lista unificada de tareas Runnable: " + tareas.size() + " tareas principales");
        System.out.println("   ‚úÖ Control granular con m√©todos detener() personalizados");
        System.out.println("   ‚úÖ Estado independiente del hilo (activo/inactivo)");
        
        System.out.println("\nüèóÔ∏è  3. SEPARACI√ìN DE RESPONSABILIDADES:");
        System.out.println("   ‚úÖ L√≥gica de negocio separada de la gesti√≥n de hilos");
        System.out.println("   ‚úÖ Clases m√°s enfocadas en su prop√≥sito espec√≠fico");
        System.out.println("   ‚úÖ Mejor encapsulaci√≥n y mantenibilidad");
        
        System.out.println("\nüéõÔ∏è  4. CONTROL AVANZADO:");
        System.out.println("   ‚úÖ M√©todos de informaci√≥n: getInfo() en cada tarea");
        System.out.println("   ‚úÖ Estados personalizados m√°s all√° de Thread.State");
        System.out.println("   ‚úÖ Gesti√≥n de hilos hijos (clientes generados)");
        
        // Demostrar gesti√≥n de hilos hijos
        List<Thread> hilosClientes = generadorClientes.getHilosClientes();
        long hilosVivos = hilosClientes.stream().filter(Thread::isAlive).count();
        
        System.out.println("\nüë• 5. GESTI√ìN DE HILOS DIN√ÅMICOS:");
        System.out.println("   ‚úÖ Generaci√≥n din√°mica de " + hilosClientes.size() + " hilos de clientes");
        System.out.println("   ‚úÖ Hilos a√∫n vivos: " + hilosVivos);
        System.out.println("   ‚úÖ Control centralizado de hilos hijos");
        
        System.out.println("\nüß™ 6. TESTABILIDAD MEJORADA:");
        System.out.println("   ‚úÖ M√©todos run() ejecutables directamente");
        System.out.println("   ‚úÖ L√≥gica testeable sin crear hilos reales");
        System.out.println("   ‚úÖ Mocking m√°s sencillo de dependencias");
        
        System.out.println("\n‚ö° 7. ESCALABILIDAD:");
        System.out.println("   ‚úÖ Compatible con ExecutorService para pools");
        System.out.println("   ‚úÖ Mejor gesti√≥n de recursos del sistema");
        System.out.println("   ‚úÖ Preparado para frameworks de concurrencia modernos");
        
        System.out.println("\nüìä 8. COMPARACI√ìN CON TP4 (Thread):");
        System.out.println("   Flexibilidad:     Thread ‚≠ê‚≠ê‚≠ê vs Runnable ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê");
        System.out.println("   Reutilizaci√≥n:    Thread ‚≠ê‚≠ê   vs Runnable ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê");
        System.out.println("   Testabilidad:     Thread ‚≠ê‚≠ê‚≠ê vs Runnable ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê");
        System.out.println("   Mantenibilidad:   Thread ‚≠ê‚≠ê‚≠ê vs Runnable ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê");
        System.out.println("   Simplicidad:      Thread ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê vs Runnable ‚≠ê‚≠ê‚≠ê‚≠ê");
        
        System.out.println("\n" + "=".repeat(80));
        System.out.println("üèÜ RESULTADO: Runnable ofrece ventajas significativas en proyectos");
        System.out.println("   complejos, mientras que Thread es m√°s simple para casos b√°sicos.");
        System.out.println("=".repeat(80));
    }
}
