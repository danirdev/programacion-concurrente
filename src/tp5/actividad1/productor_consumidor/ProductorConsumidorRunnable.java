package tp5.actividad1.productor_consumidor;

import java.util.ArrayList;
import java.util.List;

/**
 * Implementaci√≥n del problema Productor-Consumidor usando interfaz Runnable.
 * Caso 1.a del TP4: Cola infinita con productores m√°s lentos que consumidores.
 * Demuestra las ventajas de usar Runnable vs heredar de Thread.
 */
public class ProductorConsumidorRunnable {
    
    public static void main(String[] args) {
        System.out.println("=".repeat(80));
        System.out.println("    PROBLEMA PRODUCTOR-CONSUMIDOR CON INTERFAZ RUNNABLE");
        System.out.println("=".repeat(80));
        System.out.println("Implementaci√≥n: Interfaz Runnable (vs Thread del TP4)");
        System.out.println("Cola: Infinita");
        System.out.println("Productores: 10 (1000-1500ms por elemento) - M√ÅS LENTOS");
        System.out.println("Consumidores: 10 (400-800ms por elemento) - M√ÅS R√ÅPIDOS");
        System.out.println("Expectativa: Los consumidores esperar√°n elementos");
        System.out.println("=".repeat(80));
        System.out.println();
        
        // Crear cola infinita
        ColaRunnable cola = new ColaRunnable();
        System.out.println("‚úÖ Cola creada: " + cola.getInfo());
        
        // Crear listas para almacenar las tareas Runnable
        List<Productor> productores = new ArrayList<>();
        List<Consumidor> consumidores = new ArrayList<>();
        List<Thread> hilosProductores = new ArrayList<>();
        List<Thread> hilosConsumidores = new ArrayList<>();
        
        // Crear 10 productores (m√°s lentos: 1000-1500ms)
        System.out.println("\nüì¶ Creando productores...");
        for (int i = 1; i <= 10; i++) {
            Productor productor = new Productor(cola, i, 1000, 1500);
            productores.add(productor);
            
            // Crear hilo para el productor usando Runnable
            Thread hiloProductor = new Thread(productor, "Hilo-Productor-" + i);
            hilosProductores.add(hiloProductor);
        }
        
        // Crear 10 consumidores (m√°s r√°pidos: 400-800ms)
        System.out.println("üîÑ Creando consumidores...");
        for (int i = 1; i <= 10; i++) {
            Consumidor consumidor = new Consumidor(cola, i, 400, 800);
            consumidores.add(consumidor);
            
            // Crear hilo para el consumidor usando Runnable
            Thread hiloConsumidor = new Thread(consumidor, "Hilo-Consumidor-" + i);
            hilosConsumidores.add(hiloConsumidor);
        }
        
        // Iniciar todos los hilos de productores
        System.out.println("\nüöÄ Iniciando hilos de productores...");
        for (Thread hilo : hilosProductores) {
            hilo.start();
            System.out.println("   Iniciado: " + hilo.getName());
        }
        
        // Iniciar todos los hilos de consumidores
        System.out.println("üöÄ Iniciando hilos de consumidores...");
        for (Thread hilo : hilosConsumidores) {
            hilo.start();
            System.out.println("   Iniciado: " + hilo.getName());
        }
        
        System.out.println("\n" + "=".repeat(50));
        System.out.println("          SIMULACI√ìN EN EJECUCI√ìN");
        System.out.println("=".repeat(50));
        
        // Ejecutar por 30 segundos
        try {
            Thread.sleep(30000); // 30 segundos
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        // Detener todas las tareas de forma controlada
        System.out.println("\n" + "=".repeat(50));
        System.out.println("        FINALIZANDO SIMULACI√ìN");
        System.out.println("=".repeat(50));
        
        // Detener productores usando el m√©todo detener() de Runnable
        System.out.println("üõë Deteniendo productores...");
        for (Productor productor : productores) {
            productor.detener();
        }
        
        // Detener consumidores usando el m√©todo detener() de Runnable
        System.out.println("üõë Deteniendo consumidores...");
        for (Consumidor consumidor : consumidores) {
            consumidor.detener();
        }
        
        // Interrumpir hilos como respaldo
        for (Thread hilo : hilosProductores) {
            hilo.interrupt();
        }
        for (Thread hilo : hilosConsumidores) {
            hilo.interrupt();
        }
        
        // Esperar a que todos los hilos terminen
        try {
            System.out.println("‚è≥ Esperando finalizaci√≥n de hilos...");
            
            for (Thread hilo : hilosProductores) {
                hilo.join(2000); // Esperar m√°ximo 2 segundos
            }
            
            for (Thread hilo : hilosConsumidores) {
                hilo.join(2000); // Esperar m√°ximo 2 segundos
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        // Mostrar estad√≠sticas finales
        mostrarEstadisticas(productores, consumidores, cola);
        
        // Demostrar ventajas de Runnable
        demostrarVentajasRunnable(productores, consumidores);
    }
    
    /**
     * Muestra las estad√≠sticas finales de la simulaci√≥n
     */
    private static void mostrarEstadisticas(List<Productor> productores, 
                                          List<Consumidor> consumidores, 
                                          ColaRunnable cola) {
        System.out.println("\n" + "=".repeat(80));
        System.out.println("                    ESTAD√çSTICAS FINALES");
        System.out.println("=".repeat(80));
        
        int totalProducido = 0;
        int totalConsumido = 0;
        
        System.out.println("\nüì¶ PRODUCTORES (Runnable):");
        for (Productor productor : productores) {
            int producidos = productor.getElementosProducidos();
            totalProducido += producidos;
            System.out.println("  Productor-" + productor.getId() + ": " + producidos + " elementos");
        }
        
        System.out.println("\nüîÑ CONSUMIDORES (Runnable):");
        for (Consumidor consumidor : consumidores) {
            int consumidos = consumidor.getElementosConsumidos();
            totalConsumido += consumidos;
            System.out.println("  Consumidor-" + consumidor.getId() + ": " + consumidos + " elementos");
        }
        
        System.out.println("\nüìä RESUMEN GENERAL:");
        System.out.println("  Total producido: " + totalProducido);
        System.out.println("  Total consumido: " + totalConsumido);
        System.out.println("  Elementos en cola: " + cola.tama√±o());
        System.out.println("  Diferencia (P-C): " + (totalProducido - totalConsumido));
        System.out.println("  Tipo de cola: " + cola.getInfo());
        
        // An√°lisis del comportamiento
        System.out.println("\nüîç AN√ÅLISIS:");
        if (totalProducido < totalConsumido) {
            System.out.println("  ‚úÖ RESULTADO ESPERADO: Los consumidores esperaron elementos");
            System.out.println("     (productores m√°s lentos que consumidores)");
        } else if (totalProducido > totalConsumido) {
            System.out.println("  ‚ö†Ô∏è  Se acumularon elementos en la cola");
        } else {
            System.out.println("  ‚öñÔ∏è  Producci√≥n y consumo equilibrados");
        }
        
        double promedioProduccion = totalProducido / 10.0;
        double promedioConsumo = totalConsumido / 10.0;
        System.out.println("  Promedio producci√≥n por hilo: " + String.format("%.1f", promedioProduccion));
        System.out.println("  Promedio consumo por hilo: " + String.format("%.1f", promedioConsumo));
    }
    
    /**
     * Demuestra las ventajas espec√≠ficas de usar Runnable vs Thread
     */
    private static void demostrarVentajasRunnable(List<Productor> productores, 
                                                List<Consumidor> consumidores) {
        System.out.println("\n" + "=".repeat(80));
        System.out.println("              VENTAJAS DE RUNNABLE DEMOSTRADAS");
        System.out.println("=".repeat(80));
        
        System.out.println("\nüéØ 1. FLEXIBILIDAD DE IMPLEMENTACI√ìN:");
        System.out.println("   ‚úÖ Las clases Productor y Consumidor implementan Runnable");
        System.out.println("   ‚úÖ Pueden heredar de otras clases si es necesario");
        System.out.println("   ‚úÖ Separaci√≥n clara entre tarea y ejecuci√≥n");
        
        System.out.println("\nüîÑ 2. REUTILIZACI√ìN DE C√ìDIGO:");
        System.out.println("   ‚úÖ Mismo objeto Runnable puede usarse en m√∫ltiples hilos");
        System.out.println("   ‚úÖ Ejemplo: Un Productor puede crear m√∫ltiples hilos");
        
        // Demostrar reutilizaci√≥n
        Productor productorReutilizable = new Productor(new ColaRunnable(), 999, 500, 1000);
        Thread hilo1 = new Thread(productorReutilizable, "Hilo-Reutilizado-1");
        Thread hilo2 = new Thread(productorReutilizable, "Hilo-Reutilizado-2");
        
        System.out.println("   üìù Demostraci√≥n: Mismo Productor en 2 hilos diferentes:");
        System.out.println("      - " + hilo1.getName());
        System.out.println("      - " + hilo2.getName());
        
        System.out.println("\nüéõÔ∏è  3. CONTROL MEJORADO:");
        System.out.println("   ‚úÖ M√©todo detener() personalizado para parada controlada");
        System.out.println("   ‚úÖ Estado activo/inactivo independiente del hilo");
        System.out.println("   ‚úÖ Mejor gesti√≥n del ciclo de vida");
        
        System.out.println("\nüß™ 4. TESTABILIDAD:");
        System.out.println("   ‚úÖ M√©todos run() pueden ejecutarse directamente en tests");
        System.out.println("   ‚úÖ No requiere crear hilos reales para testing");
        System.out.println("   ‚úÖ Mejor aislamiento de la l√≥gica de negocio");
        
        System.out.println("\n‚ö° 5. COMPATIBILIDAD CON FRAMEWORKS:");
        System.out.println("   ‚úÖ Compatible con ExecutorService y pools de hilos");
        System.out.println("   ‚úÖ Mejor integraci√≥n con frameworks modernos");
        System.out.println("   ‚úÖ Escalabilidad mejorada");
        
        System.out.println("\nüìà 6. ESTAD√çSTICAS DE IMPLEMENTACI√ìN:");
        int productoresActivos = (int) productores.stream().filter(Productor::estaActivo).count();
        int consumidoresActivos = (int) consumidores.stream().filter(Consumidor::estaActivo).count();
        
        System.out.println("   Productores a√∫n activos: " + productoresActivos + "/10");
        System.out.println("   Consumidores a√∫n activos: " + consumidoresActivos + "/10");
        System.out.println("   Control de estado: ‚úÖ Funcional");
        
        System.out.println("\n" + "=".repeat(80));
        System.out.println("üèÜ CONCLUSI√ìN: Runnable ofrece mayor flexibilidad y mejor dise√±o");
        System.out.println("   que la herencia directa de Thread, manteniendo la funcionalidad.");
        System.out.println("=".repeat(80));
    }
}
